{
	"id": "40c6b309-f391-45b2-5059-ad13c90430db",
	"name": "Events_New_Trigger_API",
	"description": "",
	"order": [
		"982ed8c2-a66c-fe54-9218-5df35638f18e",
		"bc063fb7-dc43-84fa-a686-83e7703bd8eb",
		"4cad195a-0659-c166-8b1b-4dd89bad01c5",
		"6e71fc6d-d471-6353-ea57-f89340acf186",
		"90baf065-97e7-e488-37c9-ba210804c185",
		"d9009023-dc66-f922-17ea-ed5c6b38591f",
		"bee64fa7-c5d6-0957-9e25-a136d3595a8b",
		"9a7b337c-f573-6c3c-8a56-32d64254d745",
		"30923cc2-8a31-c4e2-84ce-bd4e46a2df4f",
		"11de415e-28b7-d64c-d009-30ef3baa7493",
		"7007d278-3f4a-22ac-60b1-76d0beaa4207",
		"12ca485a-a1bd-5721-5c5b-8a6f2c7c364a",
		"2b0ee7a6-215d-d90e-7b13-37f136382aa9",
		"fe3a3c03-31cb-d0d0-5094-78dc71d3833b",
		"12d61366-7299-79a4-0ebc-c02425a0ab28",
		"a8eb5f4d-463d-6a17-b56b-f786c52f931a",
		"c40e3783-51d6-bd61-4929-1405e5fcf7e9",
		"dc96d674-00bd-1aaf-247d-b5da4b4cdaf0",
		"488ae650-f48b-8b63-48de-d599fb1a18f0",
		"aac831e5-9205-f6b6-c9fe-c83ac0740cbe",
		"1c9543fc-6791-defc-5fd7-3975331cb8fd",
		"e6129632-2286-040b-60fb-edd188d0e0ef",
		"a0d6a060-2dd8-6f44-1a6d-3304c557247e",
		"bcd1b201-f56d-0ff3-d11f-700aa2707519",
		"a6bcb44b-76dc-b75a-0cfd-99abd5ccbeda",
		"d63ea8ba-42a6-a327-e6f8-780e2b2e4627",
		"81175f19-beaf-9a36-43f8-6097d553705f",
		"00ef3edf-cea7-0c66-e902-63c2c9480487",
		"3dbbf719-2541-3f93-fed4-e200ca11b953",
		"e6a4ded3-8650-1b19-7bee-d5e467177e82",
		"5023028a-c524-1ef9-7fd3-f9cf0b07c8ae",
		"2469f5bf-e3bf-2fa8-fe38-ed0635dd08a0",
		"76c4484e-fbc2-0455-83a0-e0b80d798a6d",
		"a5cc28f3-a7da-8833-425f-31d8ee2ac45f",
		"5457dc17-a720-4bb4-2925-de3e1831c87a",
		"3d3b4d5f-f32a-5975-7dc2-64ad3d956473",
		"8b6ceb3a-cd88-289f-1d92-6fff7e75f6ff",
		"3f0a783c-e8b4-50a4-8d62-5f1e7e8d83f9",
		"e7dbb5d1-1981-6a1e-7d5a-80ae111ec2e4",
		"b618cca5-dcfb-f20b-ecc0-dbd089824b75",
		"622cb8fc-7f26-2e1a-0e64-f7735cc15d3a",
		"6290ffb4-3daa-31c8-f830-cdae56aa4d75",
		"4b94798f-e975-5379-aae0-c9ea7e05d34e",
		"39a006c1-d685-558c-2537-5708410e4b86"
	],
	"folders": [],
	"timestamp": 1472834517820,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "00ef3edf-cea7-0c66-e902-63c2c9480487",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId') && typeof data.data.eventId === 'string') {\n        tests[\"data.eventId string field present in output\"] = true;\n        tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventId', data.data.eventId);\n    }\n    else {\n        tests[\"data.eventId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471626528874,
			"name": "Nested - Create Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"nothing\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"maxY\": 10.0,\n\t\t\"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"SillyString\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "11de415e-28b7-d64c-d009-30ef3baa7493",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId')) {\n        tests[\"data.eventId field present in output\"] = true;\n        tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n    }\n    else {\n        tests[\"data.eventId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840250855,
			"name": "Get Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "12ca485a-a1bd-5721-5c5b-8a6f2c7c364a",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId') && data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (data.data[i].hasOwnProperty('alertId') && typeof data.data[i].alertId === 'string') {\n                    tests[\"data[].alertId string field present in output\"] = true;\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                else {\n                    tests[\"data[].alertId string field present in output\"] = false;\n                }\n                if (data.data[i].hasOwnProperty('jobId') && typeof data.data[i].jobId === 'string') {\n                    tests[\"data[].jobId string field present in output\"] = true;\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId', data.data[i].jobId);\n                }\n                else {\n                    tests[\"data[].jobId string field present in output\"] = false;\n                }\n            }\n        }\n        else {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"alert found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Find Alert');\n            pausecomp(1000);\n        }\n        else {\n            tests[\"alert found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470930662240,
			"name": "Find Alert",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "12d61366-7299-79a4-0ebc-c02425a0ab28",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('dataId')) {\n        tests[\"data.dataId field present in output\"] = true;\n        tests[\"Same dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId');\n    }\n    else {\n        tests[\"data.dataId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('dataType')) {\n        tests[\"data.dataType field present in output\"] = true;\n        if (data.data.dataType.hasOwnProperty('content') && typeof data.data.dataType.content === 'string') {\n            tests[\"data.dataType.content field present in output\"] = true;\n            tests[\"Hello service was called.\"] = data.data.dataType.content.match(/[Hh](ello|i)/);\n        }\n        else {\n            tests[\"data.dataType.content field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.dataType field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840301786,
			"name": "Verify Data",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "1c9543fc-6791-defc-5fd7-3975331cb8fd",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"data": null,
			"dataMode": "params",
			"name": "Confirm No Alert Created",
			"description": "",
			"descriptionFormat": "html",
			"time": 1470841087312,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId') && data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (data.data[i].hasOwnProperty('alertId') && typeof data.data[i].alertId === 'string') {\n                    tests[\"data[].alertId string field present in output\"] = true;\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                else {\n                    tests[\"data[].alertId string field present in output\"] = false;\n                }\n                if (data.data[i].hasOwnProperty('jobId') && typeof data.data[i].jobId === 'string') {\n                    tests[\"data[].jobId string field present in output\"] = true;\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId', data.data[i].jobId);\n                }\n                else {\n                    tests[\"data[].jobId string field present in output\"] = false;\n                }\n            }\n        }\n        else {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = false;\n            break;\n        }\n    }\n    tests[\"Non-triggering event not found.\"] = !found;\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "2469f5bf-e3bf-2fa8-fe38-ed0635dd08a0",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "DELETE",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"data": [],
			"dataMode": "raw",
			"name": "Nested - Delete Event",
			"description": "",
			"descriptionFormat": "html",
			"time": 1471626865977,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": ""
		},
		{
			"id": "2b0ee7a6-215d-d90e-7b13-37f136382aa9",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/alert/{{alertId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Aa]lert/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId')) {\n        tests[\"data.eventId field present in output\"] = true;\n        tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n    }\n    else {\n        tests[\"data.eventId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('alertId')) {\n        tests[\"data.alertId field present in output\"] = true;\n        tests[\"Correct alertId returned\"] = data.data.alertId === postman.getEnvironmentVariable('alertId');\n    }\n    else {\n        tests[\"data.alertId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('triggerId')) {\n        tests[\"data.triggerId field present in output\"] = true;\n        tests[\"Correct triggerId returned\"] = data.data.triggerId === postman.getEnvironmentVariable('triggerId');\n    }\n    else {\n        tests[\"data.triggerId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobId')) {\n        tests[\"data.jobId field present in output\"] = true;\n        tests[\"Correct jobId returned\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n    }\n    else {\n        tests[\"data.jobId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('createdBy')) {\n        tests[\"data.createdBy field present in output\"] = true;\n        tests[\"Correct createdBy returned (Bug #6001)\"] = data.data.createdBy === 'citester';\n    }\n    else {\n        tests[\"data.createdBy field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471437879095,
			"name": "Get Alert",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "30923cc2-8a31-c4e2-84ce-bd4e46a2df4f",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId') && typeof data.data.eventId === 'string') {\n        tests[\"data.eventId string field present in output\"] = true;\n        tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventId', data.data.eventId);\n    }\n    else {\n        tests[\"data.eventId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471625634954,
			"name": "Create Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"maxY\": 10.0,\n\t\t\"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "39a006c1-d685-558c-2537-5708410e4b86",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-workflow.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Type unrecognized message.\"] = data.message.match(/[Vv]alid/) && data.message.match(/[Tt]ype/) && data.message.match(/bad/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471627692653,
			"name": "Create EventType - Invalid Data Type",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\",\r\n    \"sampleNest\": {\r\n        \"someParam\": \"string\"\r\n    },\r\n    \"badParam\": \"bad\"\r\n  }\r\n}  "
		},
		{
			"id": "3d3b4d5f-f32a-5975-7dc2-64ad3d956473",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"extraParam called out.\"] = data.message.match(/[Nn]ot/) && data.message.match(/extraParam/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}\npausecomp(1000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472071466127,
			"name": "Create Event - Extra Field",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"maxY\": 10.0,\n\t\t\"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\",\n            \"extraParam\": \"Should Not Be Here!\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "3dbbf719-2541-3f93-fed4-e200ca11b953",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId') && data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (data.data[i].hasOwnProperty('alertId') && typeof data.data[i].alertId === 'string') {\n                    tests[\"data[].alertId string field present in output\"] = true;\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                else {\n                    tests[\"data[].alertId string field present in output\"] = false;\n                }\n                if (data.data[i].hasOwnProperty('jobId') && typeof data.data[i].jobId === 'string') {\n                    tests[\"data[].jobId string field present in output\"] = true;\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId', data.data[i].jobId);\n                }\n                else {\n                    tests[\"data[].jobId string field present in output\"] = false;\n                }\n            }\n        }\n        else {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"alert found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Nested - Find Alert');\n            pausecomp(1000);\n        }\n        else {\n            tests[\"alert found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471888498265,
			"name": "Nested - Find Alert",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "3f0a783c-e8b4-50a4-8d62-5f1e7e8d83f9",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #5699 or #6444)\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472060936512,
			"name": "Delete EventType Again",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "488ae650-f48b-8b63-48de-d599fb1a18f0",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #5699) / (Bug #5977)\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message (Bug #5700)\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471267388978,
			"name": "Get Deleted Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "4b94798f-e975-5379-aae0-c9ea7e05d34e",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'mapping';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470335401725,
			"name": "Create EventType - Missing 'mapping'",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\"\r\n}\t"
		},
		{
			"id": "4cad195a-0659-c166-8b1b-4dd89bad01c5",
			"headers": "Content-Type: application/json\nAuthorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]ype/) && data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventTypeId')) {\n        tests[\"data.eventTypeId field present in output\"] = true;\n        tests[\"Correct eventTypeId returned\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n    }\n    else {\n        tests[\"data.eventTypeId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470930452931,
			"name": "Get EventType",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "5023028a-c524-1ef9-7fd3-f9cf0b07c8ae",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "DELETE",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"data": [],
			"dataMode": "raw",
			"name": "Delete EventType In Use by Event Only",
			"description": "",
			"descriptionFormat": "html",
			"time": 1472071322460,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"'In use' message\"] = data.message.match(/[Uu]s[ie]/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": ""
		},
		{
			"id": "5457dc17-a720-4bb4-2925-de3e1831c87a",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"maxY missing message\"] = data.message.match(/[Nn]ot/) && data.message.match(/maxY/) && data.message.match(/[Ee]vent[Tt]ype/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471627403209,
			"name": "Create Event - Missing Field",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "622cb8fc-7f26-2e1a-0e64-f7735cc15d3a",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"EventType does not exist message\"] = data.message.match(/[Nn]ot/) && data.message.match(/[Ee]vent\\s?[Tt]ype/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470334487719,
			"name": "Create Event - Deleted eventTypeId",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\t\n      \"mapping\": {\n\t\t\"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": \"3\",\n\t\t\"minX\": \"1.0\",\n\t\t\"minY\": \"1.0\",\n\t\t\"maxX\": \"10.0\",\n\t\t\"maxY\": \"10.0\",\n\t\t\"hosted\": true\n      }\n  },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "6290ffb4-3daa-31c8-f830-cdae56aa4d75",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'name';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470326468262,
			"name": "Create EventType - Missing 'name'",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "6e71fc6d-d471-6353-ea57-f89340acf186",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('eventTypeId')) {\n            tests[\"data[].eventTypeId field present in output\"] = true;\n            if (data.data[i].eventTypeId === postman.getEnvironmentVariable('eventTypeId')) {\n                found = true;\n            }\n        }\n        else {\n            tests[\"data[].eventTypeId field present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"eventTypeId found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setNextRequest('Query EventTypes');\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            pausecomp(1000);\n        }\n        else {\n            tests[\"eventTypeId found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032429362,
			"name": "Query EventTypes",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "7007d278-3f4a-22ac-60b1-76d0beaa4207",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event?perPage=100&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].eventId field present in output\"] = true;\n            if (data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n            }\n        }\n        else {\n            tests[\"data[].eventId field present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"eventId found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setNextRequest('Query Events');\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            pausecomp(1000);\n        }\n        else {\n            tests[\"eventId found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1473426092848,
			"name": "Query Events",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "76c4484e-fbc2-0455-83a0-e0b80d798a6d",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'data';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470342789640,
			"name": "Create Event - No Data",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "81175f19-beaf-9a36-43f8-6097d553705f",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('triggerId') && typeof data.data.triggerId === 'string') {\n        tests[\"data.triggerId string field present in output\"] = true;\n        tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n    }\n    else {\n        tests[\"data.triggerId string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('createdBy') && typeof data.data.createdBy === 'string') {\n        tests[\"data.createdBy string field present in output\"] = true;\n        tests[\"Correctly created by citester (Bug #5983)\"] = data.data.createdBy === 'citester';\n        postman.setEnvironmentVariable('createdBy', data.data.createdBy);\n    }\n    else {\n        tests[\"data.createdBy string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('eventTypeId')) {\n        tests[\"data.eventTypeId field present in output\"] = true;\n        tests[\"Correct eventTypeId used\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n        \n    }\n    else {\n        tests[\"data.eventTypeIds field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('job')) {\n        tests[\"data.job field present in output\"] = true;\n        if (data.data.job.hasOwnProperty('jobType')) {\n            tests[\"data.job.jobType field present in output\"] = true;\n            if (data.data.job.jobType.hasOwnProperty('data')) {\n                tests[\"data.job.jobType.data field present in output\"] = true;\n                if (data.data.job.jobType.data.hasOwnProperty('serviceId')) {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = true;\n                    tests[\"Correct serviceId used\"] = data.data.job.jobType.data.serviceId === postman.getEnvironmentVariable('serviceId');\n                }\n                else {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = false;\n                }\n                if (data.data.job.jobType.data.hasOwnProperty('dataInputs')) {\n                    tests[\"data.job.jobType.data.dataInputs field present in output\"] = true;\n                    if (data.data.job.jobType.data.dataInputs.hasOwnProperty('test')) {\n                        tests[\"data.job.jobType.data.dataInputs.test field present in output\"] = true;\n                        if (data.data.job.jobType.data.dataInputs.test.hasOwnProperty('type')) {\n                            tests[\"data.job.jobType.data.dataInputs.test.type field present in output\"] = true;\n                            tests[\"Input type matches original value (Bug #5779)\"] = data.data.job.jobType.data.dataInputs.test.type === \"body\";\n                        }\n                        else {\n                            tests[\"data.job.jobType.data.dataInputs.test.type field present in output\"] = false;\n                        }\n                    }\n                    else {\n                        tests[\"data.job.jobType.data.dataInputs.test field present in output\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.job.jobType.data.dataInputs field present in output\"] = false;\n                }\n                if (data.data.job.jobType.data.hasOwnProperty('dataOutput') && Array.isArray(data.data.job.jobType.data.dataOutput) && data.data.job.jobType.data.dataOutput.length === 1) {\n                    tests[\"data.job.jobType.data.dataOutput array field present in output and has one element\"] = true;\n                    if (data.data.job.jobType.data.dataOutput[0].hasOwnProperty('type')) {\n                        tests[\"data.job.jobType.data.dataOutput[0].type field present in output\"] = true;\n                        tests[\"Output type matches original value (Bug #5779)\"] = data.data.job.jobType.data.dataOutput[0].type === \"text\";\n                    }\n                    else {\n                        tests[\"data.job.jobType.data.dataOutput[0].type field present in output\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.job.jobType.data.dataOutput array field present in output and has one element\"] = false;\n                }\n            }\n            else {\n                tests[\"data.job.jobType.data field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"data.job.jobType field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.job field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472841047441,
			"name": "Nested - Create Trigger",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.sampleNest.someParam\": \"SillyString\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"id": "8b6ceb3a-cd88-289f-1d92-6fff7e75f6ff",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventTypeId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventTypeId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470841478300,
			"name": "Delete EventType",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "90baf065-97e7-e488-37c9-ba210804c185",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output.\"] = true;\n    if (data.data.hasOwnProperty('serviceId') && typeof data.data.serviceId === 'string') {\n        tests[\"data.serviceId string field present in output.\"] = true;\n        tests[\"GUID created for serviceId\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"serviceId\",data.data.serviceId);\n    }\n    else{\n        tests[\"data.serviceId string field present in output.\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output.\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470930453668,
			"name": "Register Service",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"url\": \"http://pzsvc-hello.int.geointservices.io/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : \"GET\",\n    \"serviceId\": \"\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"~!~ xXx Ultra-specific example just for this test xXx ~!~\"\n    }\n}"
		},
		{
			"id": "982ed8c2-a66c-fe54-9218-5df35638f18e",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('eventTypeId', '');\npostman.setEnvironmentVariable('serviceId', '');\npostman.setEnvironmentVariable('triggerId', '');\npostman.setEnvironmentVariable('eventId', '');\npostman.setEnvironmentVariable('alertId', '');\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 5);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032480808,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "9a7b337c-f573-6c3c-8a56-32d64254d745",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId')) {\n            tests[\"data[].triggerId field present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId')) {\n                found = true;\n            }\n        }\n        else {\n            tests[\"data[].triggerId field present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"triggerId found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setNextRequest('Query Triggers');\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            pausecomp(1000);\n        }\n        else {\n            tests[\"triggerId found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032421998,
			"name": "Query Triggers",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		},
		{
			"id": "a0d6a060-2dd8-6f44-1a6d-3304c557247e",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "DELETE",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"data": [],
			"dataMode": "raw",
			"name": "Delete EventType In Use by Trigger Only",
			"description": "",
			"descriptionFormat": "html",
			"time": 1472071263901,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"'In use' message\"] = data.message.match(/[Uu]s[ie]/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": ""
		},
		{
			"id": "a5cc28f3-a7da-8833-425f-31d8ee2ac45f",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'eventTypeId';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470342475129,
			"name": "Create Event - No EventTypeId",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\t\n      \"mapping\": {\n\t\t\"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": \"3\",\n\t\t\"minX\": \"1.0\",\n\t\t\"minY\": \"1.0\",\n\t\t\"maxX\": \"10.0\",\n\t\t\"maxY\": \"10.0\",\n\t\t\"hosted\": true\n      }\n    }\n}"
		},
		{
			"id": "a6bcb44b-76dc-b75a-0cfd-99abd5ccbeda",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #5699)\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470841473303,
			"name": "Delete Trigger Again",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "a8eb5f4d-463d-6a17-b56b-f786c52f931a",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 403\"] = responseCode.code === 403;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"'In use' message\"] = data.message.match(/[Uu]s[ie]/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472071217431,
			"name": "Delete EventType In Use",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "aac831e5-9205-f6b6-c9fe-c83ac0740cbe",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId') && typeof data.data.eventId === 'string') {\n        tests[\"data.eventId string field present in output\"] = true;\n        tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventId', data.data.eventId);\n    }\n    else {\n        tests[\"data.eventId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471625711998,
			"name": "Create Non-triggering Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"graster\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"maxY\": 10.0,\n\t\t\"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "b618cca5-dcfb-f20b-ecc0-dbd089824b75",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400 (Bug #5994)\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"EventType does not exist message\"] = data.message.match(/[Nn]ot/) && data.message.match(/[Ee]vent\\s?[Tt]ype/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472842260438,
			"name": "Create Trigger - Deleted eventTypeId",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.dataType\": \"raster\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"id": "bc063fb7-dc43-84fa-a686-83e7703bd8eb",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201 (Bug #6162)\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]ype/) && data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventTypeId') && typeof data.data.eventTypeId === 'string') {\n        tests[\"data.eventTypeId string field present in output\"] = true;\n        tests[\"eventTypeId GUID created\"] = data.data.eventTypeId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventTypeId', data.data.eventTypeId);\n    }\n    else {\n        tests[\"data.eventTypeId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472047110166,
			"name": "Create EventType",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\",\r\n    \"sampleNest\": {\r\n        \"someParam\": \"string\"\r\n    }\r\n  }\r\n}  "
		},
		{
			"id": "bcd1b201-f56d-0ff3-d11f-700aa2707519",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct triggerId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('triggerId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470341763060,
			"name": "Delete Trigger",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "bee64fa7-c5d6-0957-9e25-a136d3595a8b",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('triggerId') && typeof data.data.triggerId === 'string') {\n        tests[\"data.triggerId string field present in output\"] = true;\n        tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n    }\n    else {\n        tests[\"data.triggerId string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('eventTypeId')) {\n        tests[\"data.eventTypeId field present in output\"] = true;\n        tests[\"Correct eventTypeId used\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n        \n    }\n    else {\n        tests[\"data.eventTypeIds field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('job')) {\n        tests[\"data.job field present in output\"] = true;\n        if (data.data.job.hasOwnProperty('jobType')) {\n            tests[\"data.job.jobType field present in output\"] = true;\n            if (data.data.job.jobType.hasOwnProperty('data')) {\n                tests[\"data.job.jobType.data field present in output\"] = true;\n                if (data.data.job.jobType.data.hasOwnProperty('serviceId')) {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = true;\n                    tests[\"Correct serviceId used\"] = data.data.job.jobType.data.serviceId === postman.getEnvironmentVariable('serviceId');\n                }\n                else {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"data.job.jobType.data field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"data.job.jobType field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.job field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472840479443,
			"name": "Get Trigger",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "c40e3783-51d6-bd61-4929-1405e5fcf7e9",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471524015444,
			"name": "Delete Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "d63ea8ba-42a6-a327-e6f8-780e2b2e4627",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message (Bug #5700)\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470342171417,
			"name": "Get Deleted Trigger",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "d9009023-dc66-f922-17ea-ed5c6b38591f",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('triggerId') && typeof data.data.triggerId === 'string') {\n        tests[\"data.triggerId string field present in output\"] = true;\n        tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n    }\n    else {\n        tests[\"data.triggerId string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('createdBy') && typeof data.data.createdBy === 'string') {\n        tests[\"data.createdBy string field present in output\"] = true;\n        tests[\"Correctly created by citester (Bug #5983)\"] = data.data.createdBy === 'citester';\n        postman.setEnvironmentVariable('createdBy', data.data.createdBy);\n    }\n    else {\n        tests[\"data.createdBy string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('eventTypeId')) {\n        tests[\"data.eventTypeId field present in output\"] = true;\n        tests[\"Correct eventTypeId used\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n        \n    }\n    else {\n        tests[\"data.eventTypeIds field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('job')) {\n        tests[\"data.job field present in output\"] = true;\n        if (data.data.job.hasOwnProperty('jobType')) {\n            tests[\"data.job.jobType field present in output\"] = true;\n            if (data.data.job.jobType.hasOwnProperty('data')) {\n                tests[\"data.job.jobType.data field present in output\"] = true;\n                if (data.data.job.jobType.data.hasOwnProperty('serviceId')) {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = true;\n                    tests[\"Correct serviceId used\"] = data.data.job.jobType.data.serviceId === postman.getEnvironmentVariable('serviceId');\n                }\n                else {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = false;\n                }\n                if (data.data.job.jobType.data.hasOwnProperty('dataInputs')) {\n                    tests[\"data.job.jobType.data.dataInputs field present in output\"] = true;\n                    if (data.data.job.jobType.data.dataInputs.hasOwnProperty('test')) {\n                        tests[\"data.job.jobType.data.dataInputs.test field present in output\"] = true;\n                        if (data.data.job.jobType.data.dataInputs.test.hasOwnProperty('type')) {\n                            tests[\"data.job.jobType.data.dataInputs.test.type field present in output\"] = true;\n                            tests[\"Input type matches original value (Bug #5779)\"] = data.data.job.jobType.data.dataInputs.test.type === \"body\";\n                        }\n                        else {\n                            tests[\"data.job.jobType.data.dataInputs.test.type field present in output\"] = false;\n                        }\n                    }\n                    else {\n                        tests[\"data.job.jobType.data.dataInputs.test field present in output\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.job.jobType.data.dataInputs field present in output\"] = false;\n                }\n                if (data.data.job.jobType.data.hasOwnProperty('dataOutput') && Array.isArray(data.data.job.jobType.data.dataOutput) && data.data.job.jobType.data.dataOutput.length === 1) {\n                    tests[\"data.job.jobType.data.dataOutput array field present in output and has one element\"] = true;\n                    if (data.data.job.jobType.data.dataOutput[0].hasOwnProperty('type')) {\n                        tests[\"data.job.jobType.data.dataOutput[0].type field present in output\"] = true;\n                        tests[\"Output type matches original value (Bug #5779)\"] = data.data.job.jobType.data.dataOutput[0].type === \"text\";\n                    }\n                    else {\n                        tests[\"data.job.jobType.data.dataOutput[0].type field present in output\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.job.jobType.data.dataOutput array field present in output and has one element\"] = false;\n                }\n            }\n            else {\n                tests[\"data.job.jobType.data field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"data.job.jobType field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.job field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472840432114,
			"name": "Create Trigger",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"eventTypeId\": \"{{eventTypeId}}\",\n    \"condition\": {\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.dataType\": \"raster\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"id": "dc96d674-00bd-1aaf-247d-b5da4b4cdaf0",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #5699) / (Bug #5977)\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471267376715,
			"name": "Delete Event Again",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e6129632-2286-040b-60fb-edd188d0e0ef",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}\npausecomp(1000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472071392559,
			"name": "Delete Non-triggering Event",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e6a4ded3-8650-1b19-7bee-d5e467177e82",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct triggerId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('triggerId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}\npausecomp(1000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472071415007,
			"name": "Nested - Delete Trigger",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "e7dbb5d1-1981-6a1e-7d5a-80ae111ec2e4",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message (Bug #5700)\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470324671205,
			"name": "Get Deleted EventType",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "fe3a3c03-31cb-d0d0-5094-78dc71d3833b",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200 (Task #5525)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Job Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n                postman.setEnvironmentVariable('retry_loop',0);\n            }\n        }\n        else if(data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if (data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present in output\"] = true;\n                if (data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present in output\"] = true;\n                    tests[\"GUID created for dataId\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable(\"dataId\", data.data.result.dataId);\n                }\n                else {\n                    tests[\"data.result.dataId string field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobType') && typeof data.data.jobType === 'string') {\n        tests[\"data.jobType string field present in output\"] = true;\n        tests[\"Correct jobType\"] = data.data.jobType.match(/[eE]xecute.*[sS]ervice/);\n    }\n    else {\n        tests[\"data.jobType string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobId')) {\n        tests[\"data.jobId field present in output\"] = true;\n        tests[\"Correct jobId used\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n    }\n    else {\n        tests[\"data.jobId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    postman.setNextRequest('Delete Event');\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471899830087,
			"name": "Check Job Status",
			"description": "",
			"collectionId": "40c6b309-f391-45b2-5059-ad13c90430db",
			"responses": []
		}
	]
}