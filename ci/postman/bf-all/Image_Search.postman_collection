{
	"id": "8c38f0f3-5334-c662-6982-f2659a604aab",
	"name": "Image_Search",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "1305228e-66ab-62e3-1783-580a730b7862",
			"name": "1_Startup",
			"description": "",
			"order": [
				"33118a16-0948-793a-dc07-1cad1d6c44a8"
			],
			"owner": "699425"
		},
		{
			"id": "fc38bf6c-bc7a-2845-bb74-e5b4d39930d8",
			"name": "2.1_BF-Critical",
			"description": "",
			"order": [
				"60b7b96e-ca6f-9917-ba14-8b3d1beb55cc",
				"6ad216f4-befd-9039-b05f-375f93261622",
				"1cd2554a-a52f-0b29-94e5-05cd28a9677f",
				"363c2ddf-5d73-d173-6e59-330ba3820678"
			],
			"owner": "699425",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab"
		},
		{
			"id": "1dccf0b0-2e59-f993-f96a-427f5eb327cf",
			"name": "2.2_Critical",
			"description": "",
			"order": [
				"9224eab5-ec4f-3ba5-54c3-551c744ffa25",
				"7abba20a-1eb0-f028-fff0-0053599a6eb7"
			],
			"owner": "699425"
		},
		{
			"id": "84099454-0bb7-160d-ad4e-74f904031a43",
			"name": "3.1_BF_Normal",
			"description": "",
			"order": [
				"4188c9db-ae32-9de6-25fd-331600d278f6",
				"f2322d10-73c4-a25b-2f17-127f50aedf38",
				"fa48b0ad-10a8-9b3f-0c86-40caf3acb642"
			],
			"owner": "699425",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab"
		},
		{
			"id": "8dc80798-5db7-ad06-fb28-20d342f4573b",
			"name": "3.2_Normal",
			"description": "",
			"order": [
				"ec6f1837-99ca-cb4b-c998-f5a3e2d2242b",
				"844217df-6695-66ee-9cfc-e46b990628f7",
				"5cca6db2-e69d-cf24-5a9c-d0dd6b1c8fa5",
				"2e0a2c92-30d6-a054-1f42-59b97f911c70",
				"35fbe291-3284-a941-df66-b94473dce848"
			],
			"owner": "699425",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab"
		},
		{
			"id": "4095896a-26f4-7333-8c82-c7a76bf4ed28",
			"name": "4_Low",
			"description": "",
			"order": [
				"b20e5580-2317-2939-23a0-6658a5c6f46e",
				"2cea81bd-97bb-0091-a035-1e0ddc67615b",
				"9ad710c6-5b34-f961-1a02-3ad0d79e2cf8",
				"514a794e-2f8e-6d6a-0f95-8780e0d3a8da",
				"e24c4a1b-f3ce-a755-bf37-506f8efe11ef",
				"98e4a008-0331-81a3-bcf1-b393c2b6586f",
				"23bad0ae-40e6-37c9-b744-0d94dfaf1cfd",
				"442b1505-e6eb-b67a-62c4-8ec9ae429156"
			],
			"owner": "699425"
		}
	],
	"timestamp": 1467321289055,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"id": "1cd2554a-a52f-0b29-94e5-05cd28a9677f",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&subindex=&startIndex=0&subindex=&maxAcquiredDate=",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified date\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732436690,
			"name": "BF - empty maxAcquiredDate & subindex",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "23bad0ae-40e6-37c9-b744-0d94dfaf1cfd",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox=JustAString",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Message mentions bad value in bounding box.\"] = responseBody.match(/[Bb]ox/);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475172392339,
			"name": "Image Search w/ String BB",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": [],
			"folder": "4095896a-26f4-7333-8c82-c7a76bf4ed28"
		},
		{
			"id": "2cea81bd-97bb-0091-a035-1e0ddc67615b",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{big BB}}&cloudCover={{randomCC}}&count={{count_test}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n    tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count_test')) || data.count === data.totalCount;\n    tests[\"Found more images in second query\"] = data.totalCount > postman.getEnvironmentVariable('part1 count');\n    if (testLevels(tests, data, 'images.features', 'array')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476736477875,
			"name": "Pagination - Repeat Query",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "2e0a2c92-30d6-a054-1f42-59b97f911c70",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar bands_found = true;\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        var bands = postman.getEnvironmentVariable('bands').split(',');\n        for (var j in bands) {\n            if (!testLevels(tests, data.images.features[i], 'properties.bands.' + bands[j], 'string', 'images.features[].')) {\n                bands_found = false;\n            }\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && bands_found)) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732477259,
			"name": "w/ specified bands (and bbox)",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "33118a16-0948-793a-dc07-1cad1d6c44a8",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"   These tests create required environment variables.    \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.match(/h(ello|i)/i);\npostman.setEnvironmentVariable('initial BB', '-150,-60,-90,-10');\npostman.setEnvironmentVariable('cloudCover', 25);\npostman.setEnvironmentVariable('acquiredDate', '2016-06-01T00:00:01Z');\npostman.setEnvironmentVariable('maxAcquiredDate', '2016-06-30T00:00:01Z');\npostman.setEnvironmentVariable('bands', 'swir1,coastal');\npostman.setEnvironmentVariable('count', 900);\npostman.setEnvironmentVariable('count_test', 42);\npostman.setEnvironmentVariable('randomCC', Math.random() * 10 + 5); // This tries to make \"Image Search Pagination 1\" a new search that doesn't reuse an old search.\npostman.setEnvironmentVariable('part1 count', '');\npostman.setEnvironmentVariable('pos dateline BB', '178,-80,180,80');\npostman.setEnvironmentVariable('neg dateline BB', '-180,-80,-178,80');\npostman.setEnvironmentVariable('big BB', '-150,-60,150,60');\n\n\nif (postman.getEnvironmentVariable('environment') === 'int') {\n    var pz_key = postman.getEnvironmentVariable('Stage API Key');\n    postman.setEnvironmentVariable('piazza domain','https://piazza.stage.geointservices.io');  //pz-exec on int points to pz on stage.\n}\nelse {\n    var pz_key = postman.getEnvironmentVariable('API Key');\n    postman.setEnvironmentVariable('piazza domain','https://piazza.' + postman.getEnvironmentVariable('domain'));\n}\npostman.setEnvironmentVariable('pz key', pz_key);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476736512534,
			"name": "Hello, pzsvc-image-catalog",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "35fbe291-3284-a941-df66-b94473dce848",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&bands={{bands}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&maxAcquiredDate={{maxAcquiredDate}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\nvar max_search_date = Date.parse(postman.getEnvironmentVariable('maxAcquiredDate'));\nvar bands_found = true;\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified dates\"] = image_date >= min_search_date && image_date <= max_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        var bands = postman.getEnvironmentVariable('bands').split(',');\n        for (var j in bands) {\n            if (!testLevels(tests, data.images.features[i], 'properties.bands.' + bands[j], 'string', 'images.features[].')) {\n                bands_found = false;\n            }\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified dates\"] && tests[\"CloudCover is less than or equal to the queried value\"] && bands_found)) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732483142,
			"name": "w/ All Params",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "363c2ddf-5d73-d173-6e59-330ba3820678",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pzsvc-image-catalog.{{domain}}/eventTypeID?pzGateway={{piazza domain}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"eventTypeID GUID returned\"] = responseBody.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{pz key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1475245313792,
			"name": "Get EventTypeId",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "4188c9db-ae32-9de6-25fd-331600d278f6",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/subindex",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"  < < < < < < < NORMAL (BF dependency) > > > > > > > \");\nconsole.log(\"      These tests represent important features       \");\nconsole.log(\"        that are required for Beachfront UI.         \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\ntests[\"At least one subindex is present\"] = Object.keys(data).length > 0;\nvar subindices = Object.keys(data);\nvar found = false;\n\nfor (var i in subindices) {\n    if(testLevels(tests, data, [subindices[i], 'name'], 'string') && testLevels(tests, data, [subindices[i], 'key'])) {\n        if (data[subindices[i]].name.match(/world.*shore/i)) {\n            found = true;\n            postman.setEnvironmentVariable('subindex key', data[subindices[i]].key);\n        }\n    }\n}\ntests[\"World Shorelines subindex found.\"] = found;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475242418951,
			"name": "Get \"World Shorelines\" subindex",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "442b1505-e6eb-b67a-62c4-8ec9ae429156",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&count={{count}}&acquiredDate=2016-01-31T15:04:05",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Problem with 'acquiredDate'\"] = responseBody.has('acquiredDate');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475172434536,
			"name": "Image Search w/ bad AcquiredDate",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": [],
			"folder": "4095896a-26f4-7333-8c82-c7a76bf4ed28"
		},
		{
			"id": "514a794e-2f8e-6d6a-0f95-8780e0d3a8da",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{neg dateline BB}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"A MultiPolygon image was found.\"] = responseBody.has('MultiPolygon');\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('neg dateline BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        // Note id of failing feature.\n        if (!tests[\"All images intersect the specified BB\"]) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732539637,
			"name": "Image Search - Negative dateline",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "5cca6db2-e69d-cf24-5a9c-d0dd6b1c8fa5",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?cloudCover={{cloudCover}}&count={{count}}&bbox={{initial BB}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732473094,
			"name": "w/ cloudCover (and bbox)",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "60b7b96e-ca6f-9917-ba14-8b3d1beb55cc",
			"headers": "Access-Control-Request-Headers: authorization\nAccess-Control-Request-Method: GET\nHost: pzsvc-image-catalog.{{domain}}\nAccept: */*\nReferer: https://beachfront.{{domain}}/\nOrigin: https://beachfront.{{domain}}\n",
			"url": "https://pzsvc-image-catalog.{{domain}}/eventTypeID?pzGateway=https://pz-gateway.{{domain}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < CRITICAL (BF dependency) > > > > > > \");\nconsole.log(\"    These tests represent basic functionality     \");\nconsole.log(\"       that is required for Beachfront UI.        \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "OPTIONS",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar header = postman.getResponseHeader(\"Access-Control-Allow-Headers\");\nif (typeof header === 'string') {\n    tests[\"'Access-Control-Allow-Headers' is present\"] = true;\n    tests[\"'authorization' header is allowed\"] = header.match(/authorization/i);\n}\nelse {\n    tests[\"'Access-Control-Allow-Headers' is present\"] = false;\n}\ntests[\"'Access-Control-Allow-Methods' is present\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\");\ntests[\"'Access-Control-Allow-Origin' is present\"] = postman.getResponseHeader(\"Access-Control-Allow-Origin\");\n\ntests[\"Response body is empty\"] = responseBody === '';",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475175945917,
			"name": "Check CORS",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "6ad216f4-befd-9039-b05f-375f93261622",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&maxAcquiredDate={{maxAcquiredDate}}&subIndex=&startIndex=0",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\nvar max_search_date = Date.parse(postman.getEnvironmentVariable('maxAcquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date && image_date <= max_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified date\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732422228,
			"name": "BF - empty subindex",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "7abba20a-1eb0-f028-fff0-0053599a6eb7",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/image/{{Image id}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'id')) {\n    tests[\"Correct ID Returned\"] = postman.getEnvironmentVariable('Image id') === data.id;\n}\npostman.setNextRequest('w/ acquiredDate');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476888183756,
			"name": "Single Image",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "844217df-6695-66ee-9cfc-e46b990628f7",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?maxAcquiredDate={{maxAcquiredDate}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar max_search_date = Date.parse(postman.getEnvironmentVariable('maxAcquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date <= max_search_date;\n        }\n        // Note id of failing feature.\n        if (!tests[\"All images were within the specified date\"]) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732468208,
			"name": "w/ maxAcquiredDate",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "9224eab5-ec4f-3ba5-54c3-551c744ffa25",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&count={{count}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    if (testLevels(tests, data.images.features[0], 'id', 'skip', 'images.features[0].')) {\n        postman.setEnvironmentVariable('Image id', data.images.features[0].id);\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        // Note id of failing feature.\n        if (!tests[\"All images intersect the specified BB\"]) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476888191057,
			"name": "Image Search",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "98e4a008-0331-81a3-bcf1-b393c2b6586f",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox=150,10,20,-10",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Message mentions order of values in bounding box.\"] = responseBody.match(/[Oo]rder/) && responseBody.match(/[Bb]ox/);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475172368989,
			"name": "Image Search w/ Bad BB",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": [],
			"folder": "4095896a-26f4-7333-8c82-c7a76bf4ed28"
		},
		{
			"id": "9ad710c6-5b34-f961-1a02-3ad0d79e2cf8",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{pos dateline BB}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"A MultiPolygon image was found.\"] = responseBody.has('MultiPolygon');\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        \n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('pos dateline BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        // Note id of failing feature.\n        if (!tests[\"All images intersect the specified BB\"]) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732531349,
			"name": "Image Search - Positive dateline",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "b20e5580-2317-2939-23a0-6658a5c6f46e",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{big BB}}&cloudCover={{randomCC}}&count={{count_test}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");\nconsole.log(\"  These tests represent less-important features.  \");\nconsole.log(\"More attention is given to options and edge cases.\");\nconsole.log(\"You may push if these tests fail, but be careful. \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n    tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count_test')) || data.count === data.totalCount;\n    tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    postman.setEnvironmentVariable('part1 count', data.totalCount);\n    if (testLevels(tests, data, 'images.features', 'array')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476736467426,
			"name": "Pagination - Start Query",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "e24c4a1b-f3ce-a755-bf37-506f8efe11ef",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Message states that a discovery request must contain a bounding box\"] = (responseBody.has(\"contain\") && responseBody.match(/[bB]ounding [bB]ox/));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475172343131,
			"name": "Image Search w/o BB",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": [],
			"folder": "4095896a-26f4-7333-8c82-c7a76bf4ed28"
		},
		{
			"id": "ec6f1837-99ca-cb4b-c998-f5a3e2d2242b",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?acquiredDate={{acquiredDate}}&count={{count}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < NORMAL > > > > > > > > > > > \");\nconsole.log(\"      These tests represent important features.      \");\nconsole.log(\"Use extreme caution when pushing if these tests fail.\");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\nvar current_date = Date.now();\nvar found = false;\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date;\n            if (current_date - image_date <= 549200000) {\n                found = true;\n            }\n        }\n        // Note id of failing feature.\n        if (!tests[\"All images were within the specified date\"]) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}\n\ntests[\"A recent image (less than 3 days) is available.\"] = found;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732463912,
			"name": "w/ acquiredDate",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "f2322d10-73c4-a25b-2f17-127f50aedf38",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&startIndex=0&subIndex={{subindex key}}&maxAcquiredDate=",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified date\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732453406,
			"name": "BF - empty maxAcquiredDate",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "fa48b0ad-10a8-9b3f-0c86-40caf3acb642",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&maxAcquiredDate={{maxAcquiredDate}}&startIndex=0&subIndex={{subindex key}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\nvar max_search_date = Date.parse(postman.getEnvironmentVariable('maxAcquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n        tests[\"'totalCount' is not zero.\"] = data.totalCount !== 0;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date && image_date <= max_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified date\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1476732458295,
			"name": "BF - all options",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		}
	]
}