{
	"id": "8c38f0f3-5334-c662-6982-f2659a604aab",
	"name": "Image_Search",
	"description": "",
	"order": [
		"33118a16-0948-793a-dc07-1cad1d6c44a8",
		"6b8b2215-1020-a395-fb50-df4c96059a30",
		"9224eab5-ec4f-3ba5-54c3-551c744ffa25",
		"5cca6db2-e69d-cf24-5a9c-d0dd6b1c8fa5",
		"ec6f1837-99ca-cb4b-c998-f5a3e2d2242b",
		"2e0a2c92-30d6-a054-1f42-59b97f911c70",
		"35fbe291-3284-a941-df66-b94473dce848",
		"b20e5580-2317-2939-23a0-6658a5c6f46e",
		"6a913981-987d-792e-1088-a7308a9624b9",
		"e24c4a1b-f3ce-a755-bf37-506f8efe11ef",
		"98e4a008-0331-81a3-bcf1-b393c2b6586f",
		"23bad0ae-40e6-37c9-b744-0d94dfaf1cfd"
	],
	"folders": [],
	"timestamp": 1467321289055,
	"owner": "699425",
	"remoteLink": "",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "23bad0ae-40e6-37c9-b744-0d94dfaf1cfd",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox=JustAString",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests['~~~~~ Not Yet Implemented. ~~~~~'] = true",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467732825384,
			"name": "Image Search w/ String BB",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "2e0a2c92-30d6-a054-1f42-59b97f911c70",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&bands={{bands}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('images')) {\n    tests[\"images field present in output\"] = true;\n    if (data.images.hasOwnProperty('features') && Array.isArray(data.images.features) && data.images.features.length > 0){\n        tests[\"images.features array field present in output\"] = true;\n        for (i = 0; i < data.images.features.length; i++) {\n            if (data.images.features[i].hasOwnProperty('properties')) {\n                tests[\"images.features.properties field present in output\"] = true;\n                if (data.images.features[i].properties.hasOwnProperty('bands')) {\n                    tests[\"images.features.properties.bands field present in output\"] = true;\n                    var bands = postman.getEnvironmentVariable('bands').split(',');\n                    for (var j in bands) {\n                        tests[\"requested band '\" + bands[j] + \"' found in all images.\"] = data.images.features[i].properties.bands.hasOwnProperty(bands[j]);\n                    }\n                }\n                else {\n                    tests[\"images.features.properties.bands field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"images.features.properties field present in output\"] = false;\n            }\n        }\n    }\n    else {\n        tests[\"images.features array field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467733563115,
			"name": "w/ specified bands",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "33118a16-0948-793a-dc07-1cad1d6c44a8",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('pzsvc-image-catalog url', '');\npostman.setEnvironmentVariable('initial BB', '100,-60,140,-10');\npostman.setEnvironmentVariable('cloudCover', 4);\npostman.setEnvironmentVariable('acquiredDate', '2016-06-20T00:00:01Z');\npostman.setEnvironmentVariable('bands', 'swir1,coastal');\npostman.setEnvironmentVariable('count', 500);\npostman.setEnvironmentVariable('count_test', 42);\npostman.setEnvironmentVariable('randomCC', Math.random() * 10 + 5); // This tries to make \"Image Search Pagination 1\" a new search that doesn't reuse an old search.",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467401430571,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "35fbe291-3284-a941-df66-b94473dce848",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&bands={{bands}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function inBox(coord, BB) {\n    var minLat = Number(BB[0]);\n    var minLon = Number(BB[1]);\n    var maxLat = Number(BB[2]);\n    var maxLon = Number(BB[3]);\n    return (coord[0] >= minLat && coord[0] <= maxLat && coord[1] >= minLon && coord[1] <= maxLon);\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('images')) {\n    tests[\"images field present in output\"] = true;\n    if (data.images.hasOwnProperty('features') && Array.isArray(data.images.features) && data.images.features.length > 0){\n        tests[\"images.features array field present in output\"] = true;\n        var BB = postman.getEnvironmentVariable('initial BB').split(',');\n        for (i = 0; i < data.images.features.length; i++) {\n            if (data.images.features[i].hasOwnProperty('geometry')) {\n                tests[\"images.features.geometry field present in output\"] = true;\n                if (data.images.features[i].geometry.hasOwnProperty('coordinates') && Array.isArray(data.images.features[i].geometry.coordinates)) {\n                    tests[\"images.features.geometry.coordiantes field present in output and is an Array\"] = true;\n                }\n                else {\n                    tests[\"images.features.geometry.coordiantes field present in output and is an Array\"] = false;\n                }\n            }\n            else {\n                tests[\"images.features.geometry field present in output\"] = false;\n            }\n            if (data.images.features[i].hasOwnProperty('properties')) {\n                tests[\"images.features.properties field present in output\"] = true;\n                if (data.images.features[i].properties.hasOwnProperty('acquiredDate')) {\n                    tests[\"images.features.properties.acquiredDate field present in output\"] = true;\n                    var search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\n                    var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n                    tests[\"Images were acquired after the specified date\"] = image_date >= search_date;\n                }\n                else {\n                    tests[\"images.features.properties.acquiredDate field present in output\"] = false;\n                }\n                if (data.images.features[i].properties.hasOwnProperty('cloudCover') && !isNaN(data.images.features[i].properties.cloudCover)) {\n                    tests[\"images.features.properties.cloudCover numeric field present in output\"] = true;\n                    tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n                }\n                else {\n                    tests[\"images.features.properties.cloudCover numeric field present in output\"] = false;\n                }\n                if (data.images.features[i].properties.hasOwnProperty('bands')) {\n                    tests[\"images.features.properties.bands field present in output\"] = true;\n                    var bands = postman.getEnvironmentVariable('bands').split(',');\n                    for (var j in bands) {\n                        tests[\"requested band '\" + bands[j] + \"' found in all images.\"] = data.images.features[i].properties.bands.hasOwnProperty(bands[j]);\n                    }\n                }\n                else {\n                    tests[\"images.features.properties.bands field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"images.features.properties field present in output\"] = false;\n            }\n        }\n    }\n    else {\n        tests[\"images.features array field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467733573311,
			"name": "w/ All Params",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "5cca6db2-e69d-cf24-5a9c-d0dd6b1c8fa5",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('images')) {\n    tests[\"images field present in output\"] = true;\n    if (data.images.hasOwnProperty('features') && Array.isArray(data.images.features) && data.images.features.length > 0){\n        tests[\"images.features array field present in output\"] = true;\n        for (i = 0; i < data.images.features.length; i++) {\n            if (data.images.features[i].hasOwnProperty('properties')) {\n                tests[\"images.features.properties field present in output\"] = true;\n                if (data.images.features[i].properties.hasOwnProperty('cloudCover') && !isNaN(data.images.features[i].properties.cloudCover)) {\n                    tests[\"images.features.properties.cloudCover numeric field present in output\"] = true;\n                    tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n                }\n                else {\n                    tests[\"images.features.properties.cloudCover numeric field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"images.features.properties field present in output\"] = false;\n            }\n        }\n    }\n    else {\n        tests[\"images.features array field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467733506175,
			"name": "w/ cloudCover",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "6a913981-987d-792e-1088-a7308a9624b9",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&cloudCover={{randomCC}}&count={{count_test}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var count = Number(postman.getEnvironmentVariable('count_test'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('count')) {\n    tests[\"count field present in output\"] = true;\n    tests[\"Correct count value\"] = data.count === count;\n}\nelse {\n    tests[\"count field present in output\"] = false;\n}\nif (data.hasOwnProperty('totalCount')) {\n    tests[\"totalCount field present in output\"] = true;\n    tests[\"Found at least as many images as 'count'\"] = data.totalCount >= count;\n    tests[\"Found more images than last run\"] = data.totalCount > Number(postman.getEnvironmentVariable('part1 count'));\n}\nelse {\n    tests[\"totalCount field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467404443014,
			"name": "Pagination 2 (Continue Query)",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "6b8b2215-1020-a395-fb50-df4c96059a30",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10&keyword=pzsvc-image-catalog",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"data": null,
			"dataMode": "params",
			"name": "Find pzsvc-image-catalog url",
			"description": "",
			"descriptionFormat": "html",
			"time": 1467321346857,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    if (data.data[0].hasOwnProperty('url')) {\n        tests[\"data[0].url field present in output\"] = true;\n        postman.setEnvironmentVariable('pzsvc-image-catalog url',data.data[0].url);\n    }\n    else {\n        tests[\"data[0].url field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			}
		},
		{
			"id": "9224eab5-ec4f-3ba5-54c3-551c744ffa25",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function inBox(coord, BB) {\n    var minLat = Number(BB[0]);\n    var minLon = Number(BB[1]);\n    var maxLat = Number(BB[2]);\n    var maxLon = Number(BB[3]);\n    return (coord[0] >= minLat && coord[0] <= maxLat && coord[1] >= minLon && coord[1] <= maxLon);\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('images')) {\n    tests[\"images field present in output\"] = true;\n    if (data.images.hasOwnProperty('features') && Array.isArray(data.images.features) && data.images.features.length > 0){\n        tests[\"images.features array field present in output\"] = true;\n        var BB = postman.getEnvironmentVariable('initial BB').split(',');\n        for (i = 0; i < data.images.features.length; i++) {\n            if (data.images.features[i].hasOwnProperty('geometry')) {\n                tests[\"images.features.geometry field present in output\"] = true;\n                if (data.images.features[i].geometry.hasOwnProperty('coordinates') && Array.isArray(data.images.features[i].geometry.coordinates)) {\n                    tests[\"images.features.geometry.coordiantes field present in output and is an Array\"] = true;\n                }\n                else {\n                    tests[\"images.features.geometry.coordiantes field present in output and is an Array\"] = false;\n                }\n            }\n            else {\n                tests[\"images.features.geometry field present in output\"] = false;\n            }\n            if (data.images.features[i].hasOwnProperty('bbox') && Array.isArray(data.images.features[i].bbox)) {\n                tests[\"images.features.bbox field present in output and is an Array\"] = true;\n                var imgBB = data.images.features[i].bbox;\n                // Check that at least one corder of the image's BB falls within the search BB.\n                if (inBox([imgBB[0], imgBB[1]], BB) || inBox([imgBB[0], imgBB[3]], BB) || inBox([imgBB[2], imgBB[1]], BB) || inBox([imgBB[2], imgBB[3]], BB)) {\n                    tests[\"All images intersect the specified BB\"] = true;\n                }\n                else {\n                    tests[\"All images intersect the specified BB: \" + data.images.features[i].properties.acquiredDate] = false;\n                    break;\n                }\n            }\n            else {\n                tests[\"images.features.bbox field present in output and is an Array\"] = false;\n            }\n        }\n    }\n    else {\n        tests[\"images.features array field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467733533944,
			"name": "Image Search",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "98e4a008-0331-81a3-bcf1-b393c2b6586f",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox=150,10,20,-10",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests['~~~~~ Not Yet Implemented. ~~~~~'] = true",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467732818507,
			"name": "Image Search w/ Bad BB",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "b20e5580-2317-2939-23a0-6658a5c6f46e",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&cloudCover={{randomCC}}&count={{count_test}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var count = Number(postman.getEnvironmentVariable('count_test'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('count')) {\n    tests[\"count field present in output\"] = true;\n    tests[\"Correct count value\"] = data.count === count;\n}\nelse {\n    tests[\"count field present in output\"] = false;\n}\nif (data.hasOwnProperty('totalCount')) {\n    tests[\"totalCount field present in output\"] = true;\n    tests[\"Found at least as many images as 'count'\"] = data.totalCount >= count;\n    postman.setEnvironmentVariable('part1 count', data.totalCount);\n}\nelse {\n    tests[\"totalCount field present in output\"] = false;\n}\nif (data.hasOwnProperty('images')) {\n    tests[\"images field present in output\"] = true;\n    if (data.images.hasOwnProperty('features') && Array.isArray(data.images.features)){\n        tests[\"images.features array field present in output\"] = true;\n        tests[\"Correct number of features returned\"] = data.images.features.length === count;\n    }\n    else {\n        tests[\"images.features array field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467404438108,
			"name": "Pagination 1 (Start Query)",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "e24c4a1b-f3ce-a755-bf37-506f8efe11ef",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Message states that a discovery request must contain a bounding box\"] = (responseBody.has(\"contain\") && responseBody.has(/[bB]ounding [bB]ox/));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467378207963,
			"name": "Image Search w/o BB",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		},
		{
			"id": "ec6f1837-99ca-cb4b-c998-f5a3e2d2242b",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "{{pzsvc-image-catalog url}}/discover?bbox={{initial BB}}&acquiredDate={{acquiredDate}}&count={{count}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('images')) {\n    tests[\"images field present in output\"] = true;\n    if (data.images.hasOwnProperty('features') && Array.isArray(data.images.features) && data.images.features.length > 0){\n        tests[\"images.features array field present in output\"] = true;\n        for (i = 0; i < data.images.features.length; i++) {\n            if (data.images.features[i].hasOwnProperty('properties')) {\n                tests[\"images.features.properties field present in output\"] = true;\n                if (data.images.features[i].properties.hasOwnProperty('acquiredDate')) {\n                    tests[\"images.features.properties.acquiredDate field present in output\"] = true;\n                    var search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\n                    var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n                    tests[\"Images were acquired after the specified date\"] = image_date >= search_date;\n                }\n                else {\n                    tests[\"images.features.properties.acquiredDate field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"images.features.properties field present in output\"] = false;\n            }\n        }\n    }\n    else {\n        tests[\"images.features array field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"images field present in output\"] = false;\n}\n\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467733556997,
			"name": "w/ acquiredDate",
			"description": "",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab",
			"responses": []
		}
	]
}