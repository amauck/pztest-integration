{
	"id": "2dd5f07c-2591-8bf4-4976-022da79446af",
	"name": "Deployment",
	"description": "",
	"order": [
		"69c564ff-6494-381d-741b-182894663514",
		"0815ce73-e4f0-b884-b5e1-bd2aa440ef02",
		"b20052b3-43fb-f565-4fdc-ca15b37941b7",
		"98ce7455-40aa-ece5-6ace-9dc43e5fda33",
		"2a46dfc3-96f4-d2d4-7ecd-077d048147ce",
		"11239d35-810f-4909-1bed-4a5a0b4ea765",
		"d01de421-66af-96f0-6007-ada28bebfb33",
		"1823a64f-1d0d-8b11-54bc-cd7427077b53",
		"1727b164-8314-27c9-d627-bf113451cb97",
		"a19799ea-f5ea-2514-9364-b3dd247300c4",
		"f6f018d4-a78c-549e-9b7f-3e5878b105b1",
		"44ed6f3a-2b5a-c5a8-0a7d-5da6d68d8cc7",
		"175cc1b9-f375-8348-7f85-8f5d6d207dc0",
		"45bfa5fb-063e-6132-d9e9-569a0c6aeb3e",
		"bf3182da-e918-3574-450d-e77949c24565",
		"7da068bf-4b05-ed46-c63d-048f7be297ea",
		"354dd608-0fc4-e739-d868-5e874e3328de",
		"05d9f547-2132-8fb4-0e44-c936edb73832",
		"035ee88e-eed9-8908-193b-93b510160bae",
		"2ebd8405-6f09-7c31-f679-a8c71c978cd2",
		"df46f131-1672-11ac-74ae-7bca39ad8bfd",
		"c975d999-19d5-d9bc-9d02-c92ee62c2f81",
		"1585262e-611c-27ec-588e-dfdd62319126",
		"d0eb734c-9543-9eb9-0e8b-5253961525c5",
		"0ec2b2c8-e0a7-33ef-9625-66eda5834411",
		"ba0baa5c-7481-66d2-80b8-0df00076bbed",
		"268b3659-430a-453c-5018-76be5807acc1",
		"2ce9a4f6-d19e-bded-4da0-5bccac20ad43",
		"1090455a-e341-13f8-e80d-3a6d58c7a6f8",
		"00542be9-04d0-c1e5-e6d5-286806f0fd35",
		"52c68564-8a83-78a7-1ad1-7f549690689c",
		"dedcee63-083d-da6d-4eb6-9b0c36be9d9e",
		"683eecc9-a6a9-ec49-6175-f0f727079dcb",
		"30d65cde-be21-a9a3-9495-0d1e91dadedc",
		"5f3cb42e-f468-68ea-8601-0a39eced75f4",
		"0e3d4d68-8bee-93b7-d91b-e27f5f9ea5bf",
		"e21da575-f525-bf86-db65-ae7a7adc8dfe",
		"b3c408e9-62a5-7dd6-3585-f6c08fe9f031",
		"851394ce-a46f-6c04-0532-b871f880435c",
		"6ec8c989-5f4a-ea23-eba6-41a5576c114b",
		"42e69db0-d770-9680-1663-3de143d03c3f",
		"5a50e35b-2e89-32e2-9010-b0aaa3a6779e",
		"91945aab-32eb-cfdf-8b3f-3274c4690ac1",
		"7160cb10-5b27-de9e-f45e-e8f2bc08b58e",
		"41f255cc-a86e-8417-239b-1e6ee138b744",
		"fb248919-a1b9-99a2-a023-60fd83bc84cd",
		"fa8dca03-2f63-5658-19fe-a85e8961dc6b",
		"e020516f-46f7-574f-5ee4-44549ca28d9c",
		"eca729d4-c5ec-3843-6d0c-c1fb9c118144",
		"06e203fa-b181-d8b7-93d2-51c1142698bd"
	],
	"folders": [],
	"timestamp": 1469211124835,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "00542be9-04d0-c1e5-e6d5-286806f0fd35",
			"headers": "Authorization: Basic YmFkLWFwaS1rZXk6\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "bad-api-key",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469474390257,
			"name": "Deploy Data w/ Bad Auth",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "035ee88e-eed9-8908-193b-93b510160bae",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 404\"] = responseCode.code === 404;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Not exist message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469218772036,
			"name": "Delete Group Again",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "05d9f547-2132-8fb4-0e44-c936edb73832",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634625403,
			"name": "Delete Deployment in Group",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "06e203fa-b181-d8b7-93d2-51c1142698bd",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": null,
			"dataMode": "params",
			"name": "Try Shape - Delete Deployment",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566495673,
			"version": 2,
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "0815ce73-e4f0-b884-b5e1-bd2aa440ef02",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"somecat.tif\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "../0-blackbox/test-resources/somecat.tif",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634606410,
			"name": "Load File",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "0e3d4d68-8bee-93b7-d91b-e27f5f9ea5bf",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nfunction pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\npausecomp(5000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469559794019,
			"name": "Try Text - Delete Data",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "0ec2b2c8-e0a7-33ef-9625-66eda5834411",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"'Missing Type' message\"] = data.message.match(/[Mm]issing [Pp]roperty/) && data.message.match(/[Tt]ype/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469464340082,
			"name": "Deploy Data No Type",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\"\r\n}"
		},
		{
			"id": "1090455a-e341-13f8-e80d-3a6d58c7a6f8",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469476825627,
			"name": "Deploy Data w/o Auth",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "11239d35-810f-4909-1bed-4a5a0b4ea765",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469633963405,
			"name": "Check Service Exists",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "1585262e-611c-27ec-588e-dfdd62319126",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": [],
			"dataMode": "raw",
			"name": "Deploy Data Bad dataId",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469461778099,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": "{\r\n  \"dataId\": \"no-data-here\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "1727b164-8314-27c9-d627-bf113451cb97",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633968917,
			"name": "Delete Deployment",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "175cc1b9-f375-8348-7f85-8f5d6d207dc0",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633985563,
			"name": "Deploy Data in Group",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "1823a64f-1d0d-8b11-54bc-cd7427077b53",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=1000",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('perPage') && typeof data.pagination.perPage === 'number') {\n    tests[\"pagination field (and count/perPage number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.perPage){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.deploymentId});\n    var suggestion = '';\n    if (!all_fit) {suggestion = ' Try changing the perPage parameter'}\n    tests[\"deploymentId found in list.\" + suggestion] = returned_ids.indexOf(postman.getEnvironmentVariable('deploymentId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469216544679,
			"name": "Get Deployment List",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "268b3659-430a-453c-5018-76be5807acc1",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469465256406,
			"name": "Deploy Data Bad deploymentType",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"BAD_TYPE\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "2a46dfc3-96f4-d2d4-7ecd-077d048147ce",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633957947,
			"name": "Check Deployment Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "2ce9a4f6-d19e-bded-4da0-5bccac20ad43",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (w/ bad deploymentType) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Unknown Type Message\"] = data.data.result.details.match(/[Uu]nknown/) && data.data.result.details.match(/[Tt]ype/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469543837171,
			"name": "Check Deployment (w/ bad deploymentType) Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "2ebd8405-6f09-7c31-f679-a8c71c978cd2",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634636227,
			"name": "Deploy Data in Deleted Group",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "30d65cde-be21-a9a3-9495-0d1e91dadedc",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469461709354,
			"name": "Try Text - Deploy",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "354dd608-0fc4-e739-d868-5e874e3328de",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634633843,
			"name": "Delete Group",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "41f255cc-a86e-8417-239b-1e6ee138b744",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Shape - Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566328949,
			"name": "Try Shape - Get dataId",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "42e69db0-d770-9680-1663-3de143d03c3f",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469566422195,
			"name": "Try Geojson - Check Url",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "44ed6f3a-2b5a-c5a8-0a7d-5da6d68d8cc7",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/group",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('deploymentGroupId') && typeof data.data.deploymentGroupId === 'string') {\n        tests[\"data.deploymentGroupId string field present in output\"] = true;\n        tests[\"GUID created for deploymentGroupId\"] = data.data.deploymentGroupId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"deploymentGroupId\",data.data.deploymentGroupId);\n    }\n    else {\n        tests[\"data.deploymentGroupId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633987517,
			"name": "Create Group",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "45bfa5fb-063e-6132-d9e9-569a0c6aeb3e",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (in Group) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \". (Bug #5378)\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633995327,
			"name": "Check Deployment (in Group) Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "52c68564-8a83-78a7-1ad1-7f549690689c",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469121876798,
			"name": "Delete File",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "5a50e35b-2e89-32e2-9010-b0aaa3a6779e",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469556790739,
			"name": "Try Geojson - Delete Deployment",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "5f3cb42e-f468-68ea-8601-0a39eced75f4",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Text - Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Cannot deploy text message\"] = data.data.result.details.match(/[Tt]ext/) && data.data.result.details.match(/[Tt]ype/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469540626293,
			"name": "Try Text - Deployment Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "683eecc9-a6a9-ec49-6175-f0f727079dcb",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Text - Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469565898801,
			"name": "Try Text - Get dataId",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "69c564ff-6494-381d-741b-182894663514",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\ntests[\"Status code is 200\"] = responseCode.code === 200;\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 5);\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('deploymentId', '');\npostman.setEnvironmentVariable('capabilitiesUrl', '');\npostman.setEnvironmentVariable('deploymentGroupId', '');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469564166760,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "6ec8c989-5f4a-ea23-eba6-41a5576c114b",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Geojson - Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566061320,
			"name": "Try Geojson - Deployment Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "7160cb10-5b27-de9e-f45e-e8f2bc08b58e",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"shapefile\" }, \"metadata\": { \"name\": \"TestShape.zip\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "../0-blackbox/test-resources/TestShape.zip",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566346219,
			"name": "Try Shape - Ingest copy",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "7da068bf-4b05-ed46-c63d-048f7be297ea",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 500\"] = responseCode.code === 500;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"The message references deploymentGroupId\"] = data.message.match(postman.getEnvironmentVariable('deploymentGroupId'));\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634631491,
			"name": "Delete Deployment w/o Deleting Group",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "851394ce-a46f-6c04-0532-b871f880435c",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469461709354,
			"name": "Try Geojson - Deploy",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "91945aab-32eb-cfdf-8b3f-3274c4690ac1",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469121876798,
			"name": "Try Geojson - Delete Data",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "98ce7455-40aa-ece5-6ace-9dc43e5fda33",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633951353,
			"name": "Deploy Data",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "a19799ea-f5ea-2514-9364-b3dd247300c4",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": null,
			"dataMode": "params",
			"name": "Get Metadata from Deleted Deployment",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469465874027,
			"version": 2,
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 404\"] = responseCode.code === 404;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Not exist message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "b20052b3-43fb-f565-4fdc-ca15b37941b7",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633945296,
			"name": "Get dataId",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "b3c408e9-62a5-7dd6-3585-f6c08fe9f031",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Geojson - Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469624633714,
			"name": "Try Geojson - Get dataId",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "ba0baa5c-7481-66d2-80b8-0df00076bbed",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && Array.isArray(data.errors) && data.errors.length > 0) {\n    tests[\"errors array field present in output\"] = true;\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"errors[0].field field present in output\"] = true;\n        tests[\"dataId field specified\"] = data.errors[0].field === 'deploymentType';\n    }\n    else {\n        tests[\"data.errors[0].field field present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('code')) {\n        tests[\"errors[0].code field present in output\"] = true;\n        tests[\"NotNull code specified\"] = data.errors[0].code === 'NotNull';\n    }\n    else {\n        tests[\"data.errors[0].code field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"errors array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469544396706,
			"name": "Deploy Data No deploymentType",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "bf3182da-e918-3574-450d-e77949c24565",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": null,
			"dataMode": "params",
			"name": "Check Service Exists",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469457244986,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "c975d999-19d5-d9bc-9d02-c92ee62c2f81",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && Array.isArray(data.errors) && data.errors.length > 0) {\n    tests[\"errors array field present in output\"] = true;\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"errors[0].field field present in output\"] = true;\n        tests[\"dataId field specified\"] = data.errors[0].field === 'dataId';\n    }\n    else {\n        tests[\"data.errors[0].field field present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('code')) {\n        tests[\"errors[0].code field present in output\"] = true;\n        tests[\"NotNull code specified\"] = data.errors[0].code === 'NotNull';\n    }\n    else {\n        tests[\"data.errors[0].code field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"errors array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469544190341,
			"name": "Deploy Data No dataId",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n    \"deploymentType\": \"geoserver\",\r\n    \"type\": \"access\"\r\n}"
		},
		{
			"id": "d01de421-66af-96f0-6007-ada28bebfb33",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'deployment'\"] = data.type === 'deployment';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('deployment')) {\n        tests[\"data.deployment field present in output\"] = true;\n        if (data.data.deployment.hasOwnProperty('deploymentId')) {\n            tests[\"data.deployment.deploymentId field present in output\"] = true;\n            tests[\"deploymentId is correct\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId');\n        }\n        else {\n            tests[\"data.deployment.deploymentId field present in output\"] = false;\n        }\n        if (data.data.deployment.hasOwnProperty('dataId')) {\n            tests[\"data.deployment.dataId field present in output\"] = true;\n            tests[\"dataId is correct\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId');\n        }\n        else {\n            tests[\"data.deployment.dataId field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.deployment field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469215677751,
			"name": "Get Deployment Metadata",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "d0eb734c-9543-9eb9-0e8b-5253961525c5",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (w/ bad dataId) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Not exist details\"] = data.data.result.details.match(/[Nn]ot/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469544318780,
			"name": "Check Deployment (w/ bad dataId) Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "dedcee63-083d-da6d-4eb6-9b0c36be9d9e",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n        pausecomp(5000);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469467778459,
			"name": "Try Text - Ingest",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": [],
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"The string goes here!\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"some text :)\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"id": "df46f131-1672-11ac-74ae-7bca39ad8bfd",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (in Deleted Group) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Not exist details\"] = data.data.result.details.match(/[Nn]ot/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634637194,
			"name": "Check Deployment (in Deleted Group) Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "e020516f-46f7-574f-5ee4-44549ca28d9c",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": null,
			"dataMode": "params",
			"name": "Try Shape - Check Url",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566436768,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "e21da575-f525-bf86-db65-ae7a7adc8dfe",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "../0-blackbox/test-resources/Test.geojson",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469624632745,
			"name": "Try Geojson - Ingest",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "eca729d4-c5ec-3843-6d0c-c1fb9c118144",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": null,
			"dataMode": "params",
			"name": "Try Shape - Delete Data",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566475256,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "f6f018d4-a78c-549e-9b7f-3e5878b105b1",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 404\"] = responseCode.code === 404;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Not exist message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633976299,
			"name": "Delete Deployment Again",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "fa8dca03-2f63-5658-19fe-a85e8961dc6b",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Shape - Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566538615,
			"name": "Try Shape - Deployment Status",
			"description": "",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"responses": []
		},
		{
			"id": "fb248919-a1b9-99a2-a023-60fd83bc84cd",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "2dd5f07c-2591-8bf4-4976-022da79446af",
			"data": [],
			"dataMode": "raw",
			"name": "Try Shape - Deploy",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566362471,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		}
	]
}