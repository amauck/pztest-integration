{
	"id": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
	"name": "Service_Functions",
	"description": "",
	"order": [
		"0f0473a7-ce22-d30b-41c2-50609dc02df1",
		"d4926bf5-6b4a-9c82-a544-c9cdf86ba88d",
		"37da9177-24e0-070d-1db7-615cc9fb378d",
		"e8aa3486-644d-558b-e826-41129e63bc65",
		"51f42c35-dbef-8918-cc8a-4b5b0b9ed392",
		"dfca1d43-856e-960f-59a6-15347d62d48a",
		"20bc9589-3058-a46a-8d53-c1fd5fa59f93",
		"b2d0016c-66eb-4191-fa62-7e36ae043fd2",
		"3df83639-6676-2251-69ac-b616f8e33fb4",
		"f40f42ae-d6d8-c158-5c88-0eb3c069ce1f",
		"6ffa3c85-bc34-58eb-61bd-79e8881aa849",
		"933c89e0-8459-9a45-c08d-384eb7493ed6",
		"5dc8be20-d3a7-a008-9310-b40d6b3bad14",
		"52131aba-c733-10f7-59ab-b4737164edab",
		"6f03ac61-6cd1-f344-b265-81cce998ebb0",
		"06bbd438-f857-83de-a4d9-20d423915e7f",
		"8aa6dfa5-67c7-1309-b6dc-70d38efdcc64",
		"e712dfa1-2611-96f7-0259-f8d2447caa29"
	],
	"folders": [],
	"timestamp": 1466795527285,
	"owner": "699425",
	"remoteLink": "",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "06bbd438-f857-83de-a4d9-20d423915e7f",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [
				{
					"key": "softDelete",
					"value": "false",
					"type": "text",
					"enabled": true
				},
				{
					"key": "",
					"value": "",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('serviceId')) {\n    tests[\"serviceId field present\"] = true;\n    tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.serviceId;\n}\nelse{\n    tests[\"serviceId field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467118401433,
			"name": "Delete Service",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "0f0473a7-ce22-d30b-41c2-50609dc02df1",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('serviceId') && (typeof data.serviceId === 'string' || data.serviceId instanceof String)) {\n    tests[\"serviceId Present\"] = true;\n    tests[\"GUID created for serviceId\"] = data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable(\"serviceId\",data.serviceId);\n}\nelse{\n    tests[\"serviceId field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467058121617,
			"name": "Register Service",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"~!~ xXx Ultra-specific example just for this test xXx ~!~\"\n  }\n}"
		},
		{
			"id": "20bc9589-3058-a46a-8d53-c1fd5fa59f93",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10000",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('per_page') && typeof data.pagination.per_page === 'number') {\n    tests[\"pagination field (and count/per_page number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.per_page){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    var suggestion = '';\n    if (!all_fit) {suggestion = ' Try changing the per_page parameter'}\n    tests[\"Registered serviceId found in list of services.\" + suggestion] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467058904079,
			"name": "Get List of Srvices",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "37da9177-24e0-070d-1db7-615cc9fb378d",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Not ready yet\"] = false;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467123434899,
			"name": "Re-register Service",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": [],
			"rawModeData": "{\r\n    \"service\": {\r\n        \"url\": \"http://pzsvc-hello.venicegeo.io/\",\r\n        \"contractUrl\": \"http://helloContract\",\r\n        \"method\" : \"GET\",\r\n        \"serviceId\": \"\",\r\n        \"resourceMetadata\": {\r\n            \"name\": \"THE NAME HAS CHANGED\",\r\n            \"description\": \"~!~ xXx Ultra-specific example just for this test xXx ~!~\"\r\n        }\r\n    }\r\n}"
		},
		{
			"id": "3df83639-6676-2251-69ac-b616f8e33fb4",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=1000&userName=citester",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('per_page') && typeof data.pagination.per_page === 'number') {\n    tests[\"pagination field (and count/per_page number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.per_page){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467058396861,
			"name": "Filter services by userName",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "51f42c35-dbef-8918-cc8a-4b5b0b9ed392",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466798827014,
			"name": "Register Service w/o Auth",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "52131aba-c733-10f7-59ab-b4737164edab",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [
				{
					"key": "softDelete",
					"value": "false",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Not ready yet\"] = false;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('serviceId')) {\n    tests[\"serviceId field present\"] = true;\n    tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.serviceId;\n}\nelse{\n    tests[\"serviceId field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467123455312,
			"name": "Soft Delete Service",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "5dc8be20-d3a7-a008-9310-b40d6b3bad14",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10000&page=CAT",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates a failure to convert type.\"] = data.message.has('convert') && data.message.has('type');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467119107766,
			"name": "Go to 'CAT' page",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "6f03ac61-6cd1-f344-b265-81cce998ebb0",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467119169768,
			"name": "Confirm Delete",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "6ffa3c85-bc34-58eb-61bd-79e8881aa849",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10000&page=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('per_page') && typeof data.pagination.per_page === 'number') {\n    tests[\"pagination field (and count/per_page number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.per_page){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Pages are empty beyond the first\"] = data.data.length === 0\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467059521553,
			"name": "Go to Non-existent page",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "8aa6dfa5-67c7-1309-b6dc-70d38efdcc64",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;\ntests[\"Not ready yet\"] = false;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('serviceId')) {\n    tests[\"serviceId field present\"] = true;\n    tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.serviceId;\n}\nelse{\n    tests[\"serviceId field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467123464195,
			"name": "Delete Service Again",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "933c89e0-8459-9a45-c08d-384eb7493ed6",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10000&page=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Not ready yet\"] = false;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('per_page') && typeof data.pagination.per_page === 'number') {\n    tests[\"pagination field (and count/per_page number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.per_page){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Pages are empty beyond the first\"] = data.data.length === 0\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467123457686,
			"name": "Go to negative page",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "b2d0016c-66eb-4191-fa62-7e36ae043fd2",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10&keyword=!~ xXx Ultra-specific example just for this test xXx ~!",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('per_page') && typeof data.pagination.per_page === 'number') {\n    tests[\"pagination field (and count/per_page number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.per_page){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467058483277,
			"name": "Filter services by keyword",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "d4926bf5-6b4a-9c82-a544-c9cdf86ba88d",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('service') && data.service.hasOwnProperty('serviceId') && (typeof data.service.serviceId === 'string' || data.service.serviceId instanceof String)) {\n    tests[\"service.serviceId field present\"] = true;\n    tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.service.serviceId;\n}\nelse{\n    tests[\"service.serviceId field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467118049629,
			"name": "Get Service Info",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "dfca1d43-856e-960f-59a6-15347d62d48a",
			"headers": "Authorization: Basic YmFkYXV0aDpiYWRhdXRo\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "badauth",
				"password": "badauth",
				"saveToRequest": true
			},
			"time": 1466798818440,
			"name": "Register Service w/ bad Auth",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "e712dfa1-2611-96f7-0259-f8d2447caa29",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service/ThIsIsGaRbAgE",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [
				{
					"key": "softDelete",
					"value": "false",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\ntests[\"Not ready yet\"] = false;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('serviceId')) {\n    tests[\"serviceId field present\"] = true;\n    tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.serviceId;\n}\nelse{\n    tests[\"serviceId field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467123468788,
			"name": "Delete Garbage",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		},
		{
			"id": "e8aa3486-644d-558b-e826-41129e63bc65",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 415\"] = responseCode.code === 415;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('error')) {\n    tests[\"error field present\"] = true;\n    tests[\"Correct returned type\"] = data.error === 'Unsupported Media Type';\n}\nelse {\n    tests[\"error field present\"] = false;\n}\nif(data.hasOwnProperty('message')) {\n    tests[\"message field present\"] = true;\n    tests[\"useful message\"] = data.message.has('Content type') && data.message.has('not supported');\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1466798449539,
			"name": "Register Service w/o Content-Type",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "f40f42ae-d6d8-c158-5c88-0eb3c069ce1f",
			"headers": "Authorization: Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=1000&userName=citester&keyword=!~ xXx Ultra-specific example just for this test xXx ~!",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('per_page') && typeof data.pagination.per_page === 'number') {\n    tests[\"pagination field (and count/per_page number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.per_page){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "citester",
				"password": "citester",
				"saveToRequest": true
			},
			"time": 1467058709209,
			"name": "Filter services by keyword AND userName",
			"description": "",
			"collectionId": "b884e58b-bd1e-c7f0-8ca4-d5ad6315b4b4",
			"responses": []
		}
	]
}