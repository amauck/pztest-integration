{
	"id": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
	"name": "Service_Functions",
	"description": "",
	"order": [
		"bcc5b4d4-0fba-6cec-51da-de248b3aa696",
		"ba62fd24-b5af-dd0a-e952-d98bca426655",
		"da2e9962-05d5-fcfb-d7dd-406c53ab3150",
		"e6c1ecd1-6480-c854-d12d-65bbd4650aa4",
		"f73b97aa-9079-cb58-b753-b78132939250",
		"9f849d4f-d634-88a5-8174-b9292dd2f30e",
		"1257b7ab-4d85-aec0-56ef-1b86ea731f64",
		"50e868bd-5078-17f2-a38e-9da0a946431c",
		"59daecc8-92d7-3513-b955-af68cc969343",
		"06b993a4-4a77-0375-bc43-c904edbd16a5",
		"23a7e968-9289-145d-e8a6-c27a18f26a1a",
		"543ba95c-b96f-b2e6-f33f-36f06edde635",
		"f5a8a87a-fe04-83c9-cba6-49fdb7c37cd9",
		"406ab4ba-aa5f-a349-97d7-637a9caf170d",
		"2f791dee-e186-5f33-68b1-beb9cf0bf7b1",
		"5f52ef77-f9c4-82ba-ec02-8439cf2cd5c1",
		"afc1cf03-dced-3bd6-4cea-2bbf744fd6b2",
		"d0d2e607-a93e-d435-ed62-675129d14eba",
		"d6117903-a088-c464-848d-7fdd984b50cc",
		"15a458b5-d71f-3b91-75a7-c3fe6ff6e610",
		"af9c37c3-a58a-b31e-bd41-8e536a65f46f",
		"93ddbb39-82a3-185a-967f-36510389b192",
		"3d19fda7-eb9c-7e86-f989-ac2cf3a9fbd4",
		"b462876b-3513-e35d-2713-ef0737db5d14",
		"f79615c8-6c05-80b3-1fb3-801bd771f174"
	],
	"folders": [],
	"timestamp": 1466795527285,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "06b993a4-4a77-0375-bc43-c904edbd16a5",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output.\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output.\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else{\n        tests[\"data.jobId string field present in output.\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output.\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471008481639,
			"name": "Create Job",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"id": "1257b7ab-4d85-aec0-56ef-1b86ea731f64",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=1000&userName=citester&keyword={{text description}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945192471,
			"name": "Filter services by keyword AND userName",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "15a458b5-d71f-3b91-75a7-c3fe6ff6e610",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000&page=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Pages are empty beyond the first\"] = data.data.length === 0;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945222260,
			"name": "Go to Non-existent page",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "23a7e968-9289-145d-e8a6-c27a18f26a1a",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"data": [],
			"dataMode": "params",
			"name": "Check Job Status",
			"description": "",
			"descriptionFormat": "html",
			"time": 1471008333297,
			"version": 2,
			"responses": [],
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Job Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if(data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if (data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present in output\"] = true;\n                if (data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present in output\"] = true;\n                    tests[\"GUID created for dataId\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable(\"dataId\", data.data.result.dataId);\n                }\n                else {\n                    tests[\"data.result.dataId string field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobType') && typeof data.data.jobType === 'string') {\n        tests[\"data.jobType string field present in output\"] = true;\n        tests[\"Correct jobType\"] = data.data.jobType.match(/[eE]xecute.*[sS]ervice/);\n    }\n    else {\n        tests[\"data.jobType string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobId')) {\n        tests[\"data.jobId field present in output\"] = true;\n        tests[\"Correct jobId used\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n    }\n    else {\n        tests[\"data.jobId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "2f791dee-e186-5f33-68b1-beb9cf0bf7b1",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Confirm job cannot be executed. (Bug #5925)\"] = data.message.match(/[Ee]xecut/) && data.message.match(/[Ss]ervice/) && data.message.match(/offline/i);\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471439693183,
			"name": "Create Job from Soft Deleted Service",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"id": "3d19fda7-eb9c-7e86-f989-ac2cf3a9fbd4",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 415\"] = responseCode.code === 415;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('error')) {\n    tests[\"error field present\"] = true;\n    tests[\"Correct returned type\"] = data.error === 'Unsupported Media Type';\n}\nelse {\n    tests[\"error field present\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message field present\"] = true;\n    tests[\"Authenticate message\"] = data.message.match(/[Cc]ontent/) && data.message.match(/[Tt]ype/);\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471007418970,
			"name": "Register Service w/o Content-Type",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "406ab4ba-aa5f-a349-97d7-637a9caf170d",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('serviceId')) {\n        tests[\"data.serviceId field present in output\"] = true;\n        tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.data.serviceId;\n    }\n    else {\n        tests[\"data.serviceId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('resourceMetadata')) {\n        tests[\"data.resourceMetadata field present in output\"] = true;\n        if (data.data.resourceMetadata.hasOwnProperty('availability') && typeof data.data.resourceMetadata.availability === 'string') {\n            tests[\"data.resourceMetadata.availability field present in output\"] = true;\n            tests[\"Confirm Soft Delete (Bug #5925)\"] = data.data.resourceMetadata.availability.match(/off/i);\n        }\n        else {\n            tests[\"data.resourceMetadata.availability field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.resourceMetadata field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471445875806,
			"name": "Confirm Soft Delete",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "50e868bd-5078-17f2-a38e-9da0a946431c",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 (Bug #5909)\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Successful update message\"] = data.data.message.match(/[Ss]ervice/) && data.data.message.match(/[Uu]pdat/) && data.data.message.match(/[Ss]uccess/);\n    }\n    else {\n         tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    postman.setNextRequest('Create Job');\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471011915682,
			"name": "Update Service",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\n    \"url\": \"http://pzsvc-hello.int.geointservices.io/\",\n    \"contractUrl\": \"garbage\",\n    \"method\" : \"GET\",\n    \"serviceId\": \"\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"{{New Name}}\"\n    }\n}"
		},
		{
			"id": "543ba95c-b96f-b2e6-f33f-36f06edde635",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('dataId')) {\n        tests[\"data.dataId field present in output\"] = true;\n        tests[\"Same dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId');\n    }\n    else {\n        tests[\"data.dataId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('dataType')) {\n        tests[\"data.dataType field present in output\"] = true;\n        if (data.data.dataType.hasOwnProperty('content') && typeof data.data.dataType.content === 'string') {\n            tests[\"data.dataType.content field present in output\"] = true;\n            tests[\"The returned text says hello.\"] = data.data.dataType.content.match(/[Hh](ello|i)/);\n        }\n        else {\n            tests[\"data.dataType.content field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.dataType field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471009678187,
			"name": "Read Data Output",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "59daecc8-92d7-3513-b955-af68cc969343",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('serviceId')) {\n        tests[\"data.serviceId field present in output\"] = true;\n        tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.data.serviceId;\n    }\n    else {\n        tests[\"data.serviceId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('resourceMetadata')) {\n        tests[\"data.resourceMetadata field present in output\"] = true;\n        if (data.data.resourceMetadata.hasOwnProperty('name')) {\n            tests[\"data.resourceMetadata.name field present in output\"] = true;\n            tests[\"Verify name was updated\"] = postman.getEnvironmentVariable('New Name') === data.data.resourceMetadata.name;\n        }\n        else {\n            tests[\"data.resourceMetadata.name field present in output\"] = false;\n        }\n        if (data.data.resourceMetadata.hasOwnProperty('description')) {\n            tests[\"data.resourceMetadata.description field present in output\"] = true;\n            tests[\"Verify description was NOT updated (Bug #5924)\"] = postman.getEnvironmentVariable('text description') === data.data.resourceMetadata.description;\n        }\n        else {\n            tests[\"data.resourceMetadata.description field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.resourceMetadata field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006357585,
			"name": "Validate Update",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "5f52ef77-f9c4-82ba-ec02-8439cf2cd5c1",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && (typeof data.data.message === 'string' || data.data.serviceId instanceof String)) {\n        tests[\"data.message present in output\"] = true;\n        tests[\"Deleted message\"] = data.data.message.match(/[Dd]elet/);\n    }\n    else{\n        tests[\"data.message field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006448741,
			"name": "Delete Service",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "93ddbb39-82a3-185a-967f-36510389b192",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000&page=CAT",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Successful update message\"] = data.message.match(/[Tt]ype/) && data.message.match(/[Ss]tring/);\n}\nelse {\n     tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470946175495,
			"name": "Go to 'CAT' page",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "9f849d4f-d634-88a5-8174-b9292dd2f30e",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=1000&userName=citester",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945172163,
			"name": "Filter services by userName",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "af9c37c3-a58a-b31e-bd41-8e536a65f46f",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000&page=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Successful update message\"] = data.message.match(/[Pp]age/);\n}\nelse {\n     tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470946071729,
			"name": "Go to negative page",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "afc1cf03-dced-3bd6-4cea-2bbf744fd6b2",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006489453,
			"name": "Confirm Delete",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "b462876b-3513-e35d-2713-ef0737db5d14",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message field present\"] = true;\n    tests[\"Authenticate message\"] = data.message.match(/[Aa]uth/);\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1471007112910,
			"name": "Register Service w/o Auth",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "ba62fd24-b5af-dd0a-e952-d98bca426655",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('serviceId') && (typeof data.data.serviceId === 'string' || data.data.serviceId instanceof String)) {\n        tests[\"data.serviceId present in output\"] = true;\n        tests[\"GUID created for serviceId\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"serviceId\",data.data.serviceId);\n    }\n    else{\n        tests[\"data.serviceId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006409993,
			"name": "Register Service",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\n    \"url\": \"http://pzsvc-hello.int.geointservices.io/\",\n    \"contractUrl\": \"garbage\",\n    \"method\" : \"GET\",\n    \"serviceId\": \"\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\"\n    }\n}"
		},
		{
			"id": "bcc5b4d4-0fba-6cec-51da-de248b3aa696",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('serviceId', '');\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 5)\npostman.setEnvironmentVariable('text description','Search String: ' + Math.random());\npostman.setEnvironmentVariable('New Name', 'THE NAME HAS CHANGED');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1471011509487,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "d0d2e607-a93e-d435-ed62-675129d14eba",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006524826,
			"name": "Delete Service Again",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "d6117903-a088-c464-848d-7fdd984b50cc",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/ThIsIsGaRbAgE",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [
				{
					"key": "softDelete",
					"value": "false",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006552310,
			"name": "Delete Garbage",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "da2e9962-05d5-fcfb-d7dd-406c53ab3150",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('serviceId')) {\n        tests[\"data.serviceId field present in output\"] = true;\n        tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.data.serviceId;\n    }\n    else {\n        tests[\"data.serviceId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('resourceMetadata')) {\n        tests[\"data.resourceMetadata field present in output\"] = true;\n        if (data.data.resourceMetadata.hasOwnProperty('createdOn')) {\n            tests[\"data.resourceMetadata.createdOn field present in output\"] = true;\n            tests[\"Date was created (Bug #5912)\"] = data.data.resourceMetadata.createdOn !== null && data.data.resourceMetadata.createdOn !== '';\n        }\n        else {\n            tests[\"data.resourceMetadata.createdOn field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.resourceMetadata field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471287474290,
			"name": "Get Service Info",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "e6c1ecd1-6480-c854-d12d-65bbd4650aa4",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('perPage') && typeof data.pagination.perPage === 'number') {\n    tests[\"pagination field (and count/perPage number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.perPage){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    var suggestion = '';\n    if (!all_fit) {suggestion = ' Try changing the perPage parameter'}\n    tests[\"Registered serviceId found in list of services.\" + suggestion] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470944831208,
			"name": "Get List of Srvices",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "f5a8a87a-fe04-83c9-cba6-49fdb7c37cd9",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}?softDelete=true",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && (typeof data.data.message === 'string' || data.data.serviceId instanceof String)) {\n        tests[\"data.message present in output\"] = true;\n        tests[\"Deleted message\"] = data.data.message.match(/[Dd]elet/);\n    }\n    else{\n        tests[\"data.message field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471282426185,
			"name": "Soft Delete Service",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "f73b97aa-9079-cb58-b753-b78132939250",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10&keyword={{text description}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945907144,
			"name": "Filter services by keyword",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": []
		},
		{
			"id": "f79615c8-6c05-80b3-1fb3-801bd771f174",
			"headers": "Authorization: Basic YXNmOTM0ci1mdzA5cjIwLTIzcjAtM3IyMzk6\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message field present\"] = true;\n    tests[\"Authenticate message\"] = data.message.match(/[Aa]uth/);\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "asf934r-fw09r20-23r0-3r239",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471007454546,
			"name": "Register Service w/ bad Auth",
			"description": "",
			"collectionId": "d12f13de-e864-c1f8-10af-cc7a702f37d9",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		}
	]
}