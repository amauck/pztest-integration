{
	"id": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
	"name": "Image_Search_Simple",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "0fd39aa7-9151-002b-9139-f0aac98c0850",
			"name": "1_Startup",
			"description": "",
			"order": [
				"2d10eb07-e3e3-f5d2-4413-674f75b5c008"
			],
			"owner": "699425"
		},
		{
			"id": "316da8f6-f826-b1ac-61aa-b7227172fdec",
			"name": "2.1_BF-Critical",
			"description": "",
			"order": [
				"c4d6228a-678c-19ea-556e-414c4af87923",
				"9404890a-2372-5f6b-e587-5468d26a4f34",
				"4644ab99-3728-73ad-7b28-f1d6be8746e5",
				"864cd4ab-1408-e80e-fd8c-e164b38f11de"
			],
			"owner": "699425",
			"collectionId": "8c38f0f3-5334-c662-6982-f2659a604aab"
		},
		{
			"id": "8c6f2075-7ae2-c731-f30f-167426e57bd4",
			"name": "2.2_Critical",
			"description": "",
			"order": [
				"6bbed515-b357-5abb-8670-b92648d9d214"
			],
			"owner": "699425"
		}
	],
	"timestamp": 1475248480154,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "2d10eb07-e3e3-f5d2-4413-674f75b5c008",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");\nconsole.log(\"   These tests create required environment variables.    \");\nconsole.log(\"    Any failures here will cause other tests to fail.    \");\nconsole.log(\"            DO NOT PUSH if these tests fail.             \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.match(/h(ello|i)/i);\npostman.setEnvironmentVariable('initial BB', '-150,-60,-90,-10');\npostman.setEnvironmentVariable('cloudCover', 25);\npostman.setEnvironmentVariable('acquiredDate', '2016-06-01T00:00:01Z');\npostman.setEnvironmentVariable('maxAcquiredDate', '2016-06-30T00:00:01Z');\npostman.setEnvironmentVariable('bands', 'swir1,coastal');\npostman.setEnvironmentVariable('count', 900);\npostman.setEnvironmentVariable('count_test', 42);\npostman.setEnvironmentVariable('randomCC', Math.random() * 10 + 5); // This tries to make \"Image Search Pagination 1\" a new search that doesn't reuse an old search.\npostman.setEnvironmentVariable('part1 count', '');\npostman.setEnvironmentVariable('pos dateline BB', '178,-80,180,80');\npostman.setEnvironmentVariable('neg dateline BB', '-180,-80,-178,80');\n\n\nif (postman.getEnvironmentVariable('environment') === 'int') {\n    var pz_key = postman.getEnvironmentVariable('Stage API Key');\n    postman.setEnvironmentVariable('piazza domain','https://piazza.stage.geointservices.io');  //pz-exec on int points to pz on stage.\n}\nelse {\n    var pz_key = postman.getEnvironmentVariable('API Key');\n    postman.setEnvironmentVariable('piazza domain','https://piazza.' + postman.getEnvironmentVariable('domain'));\n}\npostman.setEnvironmentVariable('pz key', pz_key);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475245298056,
			"name": "Hello, pzsvc-image-catalog",
			"description": "",
			"collectionId": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
			"responses": [],
			"folder": "0fd39aa7-9151-002b-9139-f0aac98c0850"
		},
		{
			"id": "4644ab99-3728-73ad-7b28-f1d6be8746e5",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&subindex=&startIndex=0&subindex=&maxAcquiredDate=",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified date\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475175040350,
			"name": "BF - empty maxAcquiredDate & subindex",
			"description": "",
			"collectionId": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
			"responses": [],
			"folder": "316da8f6-f826-b1ac-61aa-b7227172fdec"
		},
		{
			"id": "6bbed515-b357-5abb-8670-b92648d9d214",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&count={{count}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        // Note id of failing feature.\n        if (!tests[\"All images intersect the specified BB\"]) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475175981205,
			"name": "Image Search",
			"description": "",
			"collectionId": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
			"responses": [],
			"folder": "8c6f2075-7ae2-c731-f30f-167426e57bd4"
		},
		{
			"id": "864cd4ab-1408-e80e-fd8c-e164b38f11de",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pzsvc-image-catalog.{{domain}}/eventTypeID?pzGateway={{piazza domain}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");\nconsole.log(\"    These tests represent basic functionality.    \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"eventTypeID GUID returned\"] = responseBody.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{pz key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1475245313792,
			"name": "Get EventTypeId",
			"description": "",
			"collectionId": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
			"responses": [],
			"folder": "316da8f6-f826-b1ac-61aa-b7227172fdec"
		},
		{
			"id": "9404890a-2372-5f6b-e587-5468d26a4f34",
			"headers": "",
			"url": "https://pzsvc-image-catalog.{{domain}}/discover?bbox={{initial BB}}&cloudCover={{cloudCover}}&acquiredDate={{acquiredDate}}&count={{count}}&maxAcquiredDate={{maxAcquiredDate}}&subIndex=&startIndex=0",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function checkIntersection(imgBB, srcBB) {\n    var latIntersect = (imgBB[0] >= srcBB[0] && imgBB[0] <= srcBB[2]) || (srcBB[0] >= imgBB[0] && srcBB[0] <= imgBB[2]);\n    var lonIntersect = (imgBB[1] >= srcBB[1] && imgBB[1] <= srcBB[3]) || (srcBB[1] >= imgBB[1] && srcBB[1] <= imgBB[3]);\n    return latIntersect && lonIntersect;\n}\n\nfunction adjBBs(imgBB, srcBB) {\n    if (imgBB[0] > imgBB[2]) {\n        imgBB[2] += 360;\n        if (srcBB[0] < 0) {\n            srcBB[0] += 360;\n        }\n        if (srcBB[2] < 0) {\n            srcBB[2] += 360;\n        }\n    }\n}\n\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nvar min_search_date = Date.parse(postman.getEnvironmentVariable('acquiredDate'));\nvar max_search_date = Date.parse(postman.getEnvironmentVariable('maxAcquiredDate'));\n\n\nif (testLevels(tests, data, 'images.features', 'array')) {\n    if (testLevels(tests, data, 'count') && testLevels(tests, data, 'totalCount')) {\n        tests[\"Count is accurate\"] = data.count === data.images.features.length;\n        tests[\"Expected count\"] = data.count === Number(postman.getEnvironmentVariable('count')) || data.count === data.totalCount;\n    }\n    for (i = 0; i < data.images.features.length; i++) {\n        var srcBB = postman.getEnvironmentVariable('initial BB').split(',').map(Number);\n        if (testLevels(tests, data.images.features[i], 'bbox', 'array', 'images.features[].')) {\n            // adjust both BBs for comparison\n            var imgBB = data.images.features[i].bbox;\n            adjBBs(imgBB, srcBB);\n            tests[\"All images intersect the specified BB\"] = checkIntersection(imgBB, srcBB);\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.acquiredDate', 'skip', 'images.features[].')) {\n            var image_date = Date.parse(data.images.features[i].properties.acquiredDate);\n            tests[\"All images were within the specified date\"] = image_date >= min_search_date && image_date <= max_search_date;\n        }\n        if (testLevels(tests, data.images.features[i], 'properties.cloudCover', 'skip', 'images.features[].')) {\n            tests[\"CloudCover is less than or equal to the queried value\"] = data.images.features[i].properties.cloudCover <= postman.getEnvironmentVariable('cloudCover');\n        }\n        // Note id of failing feature.\n        if (!(tests[\"All images intersect the specified BB\"] && tests[\"All images were within the specified date\"] && tests[\"CloudCover is less than or equal to the queried value\"])) {\n            if (testLevels(tests, data.images.features[i], 'id', 'skip', 'images.features[].')) {\n                tests[\"The id of the failing feature: \" + data.images.features[i].id] = false;\n            }\n            break;\n        }\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475175021444,
			"name": "BF - empty subindex",
			"description": "",
			"collectionId": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
			"responses": [],
			"folder": "316da8f6-f826-b1ac-61aa-b7227172fdec"
		},
		{
			"id": "c4d6228a-678c-19ea-556e-414c4af87923",
			"headers": "Access-Control-Request-Headers: authorization\nAccess-Control-Request-Method: GET\nHost: pzsvc-image-catalog.{{domain}}\nAccept: */*\nReferer: https://beachfront.{{domain}}/\nOrigin: https://beachfront.{{domain}}\n",
			"url": "https://pzsvc-image-catalog.{{domain}}/eventTypeID?pzGateway=https://pz-gateway.{{domain}}",
			"preRequestScript": "console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\nconsole.log(\" < < < < < < CRITICAL (BF dependency) > > > > > > \");\nconsole.log(\"    These tests represent basic functionality     \");\nconsole.log(\"       that is required for Beachfront UI.        \");\nconsole.log(\"         DO NOT PUSH if these tests fail.         \");\nconsole.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
			"pathVariables": {},
			"method": "OPTIONS",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar header = postman.getResponseHeader(\"Access-Control-Allow-Headers\");\nif (typeof header === 'string') {\n    tests[\"'Access-Control-Allow-Headers' is present\"] = true;\n    tests[\"'authorization' header is allowed\"] = header.match(/authorization/i);\n}\nelse {\n    tests[\"'Access-Control-Allow-Headers' is present\"] = false;\n}\ntests[\"'Access-Control-Allow-Methods' is present\"] = postman.getResponseHeader(\"Access-Control-Allow-Methods\");\ntests[\"'Access-Control-Allow-Origin' is present\"] = postman.getResponseHeader(\"Access-Control-Allow-Origin\");\n\ntests[\"Response body is empty\"] = responseBody === '';",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475175945917,
			"name": "Check CORS",
			"description": "",
			"collectionId": "7088b02f-e3eb-039a-b3c4-add9014ebeb1",
			"responses": [],
			"folder": "316da8f6-f826-b1ac-61aa-b7227172fdec"
		}
	]
}