{
	"id": "65c86921-823a-d9ac-f40b-92a923028da1",
	"name": "BF_PZ_Usecase",
	"description": "",
	"order": [
		"bebf9526-2bb7-e500-9e90-d20acc9e07a2",
		"d6d197e2-394d-a879-18c4-9f639f8bc4c9",
		"1893f07d-f550-7a8e-ad0b-9181d010fdfc",
		"86dd399a-a552-5fca-3035-3b8e1aaf6c29",
		"a1f90746-c9aa-5b6e-41b2-590460256458",
		"9c6e6e66-1aad-6b17-1410-623f68d95dfa",
		"c08efb39-4af9-49fa-c439-9c9a7e80c2e8",
		"6fafc7ce-b7c7-00ea-f4aa-5b7d26cf1472",
		"29c5b85d-6eb9-85f2-8307-136079b5790a",
		"fba414ef-7dfc-40bc-4a62-1bde4f087aca",
		"e8a01848-2a79-76f9-632c-982ee578da20",
		"2d5025a8-f7a9-d380-2969-5da339b3a7a1",
		"4561b68c-fd35-5fb9-2974-75cffb06e173",
		"67796b60-3617-6f34-fbd1-490ad1b46722",
		"eaf75bd7-16a3-e4c3-55a0-491c95a59a9f",
		"c02ab6ff-39a5-5162-1204-3691f8aaf717"
	],
	"folders": [],
	"timestamp": 1471034002882,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "1893f07d-f550-7a8e-ad0b-9181d010fdfc",
			"headers": "Access-Control-Request-Headers: authorization\nAccess-Control-Request-Method: GET\n",
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "OPTIONS",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var header = postman.getResponseHeader(\"Access-Control-Allow-Headers\");\nif (typeof header === 'string') {\n    tests[\"'Access-Control-Allow-Headers' is present (Bug #6218)\"] = true;\n    tests[\"'authorization' header is allowed\"] = header.match(/authorization/i);\n    tests[\"'content-type' header is allowed\"] =header.match(/content-type/i);\n}\nelse {\n    tests[\"'Access-Control-Allow-Headers' is present (Bug #6218)\"] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1473778643651,
			"name": "Get Job Options",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "29c5b85d-6eb9-85f2-8307-136079b5790a",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/file/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\n\nif (data.hasOwnProperty('shoreDataID') && typeof data.shoreDataID === 'string') {\n    tests[\"shoreDataID string field present in output\"] = true;\n    tests[\"GUID created for shoreDataID\"] = data.shoreDataID.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n    postman.setEnvironmentVariable('shoreDataID', data.shoreDataID);\n}\nelse {\n    tests[\"shoreDataID string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471271801383,
			"name": "Find Shoreline",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "2d5025a8-f7a9-d380-2969-5da339b3a7a1",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('HACK - Get dataId of Dummy Data');\n                pausecomp(2000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"shoreDataID\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472130633091,
			"name": "HACK - Get dataId of Dummy Data",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "4561b68c-fd35-5fb9-2974-75cffb06e173",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469641849341,
			"name": "Deploy Shoreline Data",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{shoreDataID}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "67796b60-3617-6f34-fbd1-490ad1b46722",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Get deploymentId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n                postman.setEnvironmentVariable('retry_loop',0);\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470920669715,
			"name": "Get deploymentId",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "6fafc7ce-b7c7-00ea-f4aa-5b7d26cf1472",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"data": null,
			"dataMode": "params",
			"name": "Get dataId",
			"description": "",
			"descriptionFormat": "html",
			"time": 1471279761820,
			"version": 2,
			"responses": [],
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "86dd399a-a552-5fca-3035-3b8e1aaf6c29",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10&keyword=bf-handle",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    if (data.data[0].hasOwnProperty('serviceId')) {\n        tests[\"data[0].serviceId field present in output\"] = true;\n        postman.setEnvironmentVariable('bf-handle serviceId',data.data[0].serviceId);\n    }\n    else {\n        tests[\"data[0].serviceId field present in output\"] = true;\n    }\n}\nelse{\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470920762371,
			"name": "Find bf-handle serviceId",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "9c6e6e66-1aad-6b17-1410-623f68d95dfa",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?per_page=10&keyword=BF_Algo_NDWI",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    if (data.data[0].hasOwnProperty('resourceMetadata')) {\n        tests[\"data[0].resourceMetadata field present in output\"] = true;\n        if (data.data[0].resourceMetadata.hasOwnProperty('metadata')) {\n            tests[\"data[0].resourceMetadata.metadata field present in output\"] = true;\n            if (data.data[0].resourceMetadata.metadata.hasOwnProperty('Interface')) {\n                tests[\"data[0].resourceMetadata.metadata.Interface field present in output\"] = true;\n                postman.setEnvironmentVariable('Algorithm Name',data.data[0].resourceMetadata.metadata.Interface);\n            }\n            else {\n                tests[\"data[0].resourceMetadata.metadata.Interface field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"data[0].resourceMetadata.metadata field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data[0].resourceMetadata field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"data array field present in outputand is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470924818768,
			"name": "Find available shoreline algorithms",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "a1f90746-c9aa-5b6e-41b2-590460256458",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10&keyword=pzsvc-image-catalog",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    if (data.data[0].hasOwnProperty('url') && typeof data.data[0].url === 'string') {\n        tests[\"data[0].url field present in output\"] = true;\n        tests[\"The catalog is on the correct space\"] = data.data[0].url.match('catalog.' + postman.getEnvironmentVariable('domain'));\n        postman.setEnvironmentVariable('pzsvc-image-catalog url',data.data[0].url);\n    }\n    else {\n        tests[\"data[0].url field present in output\"] = false;\n    }\n}\nelse{\n    tests[\"data array field present in output and is not empty\"] = false;\n    tests[\"Ending collection early: image catalog not found.\"] = false;\n    postman.setNextRequest(null);\n}\n// postman.setEnvironmentVariable('pzsvc-image-catalog url','https://pzsvc-image-catalog.' + postman.getEnvironmentVariable('domain'));",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470924780037,
			"name": "Find pzsvc-image-catalog url",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "bebf9526-2bb7-e500-9e90-d20acc9e07a2",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('pzsvc-ossim domain','https://pzsvc-ossim.' + postman.getEnvironmentVariable('domain') + '/execute');\nif (postman.getEnvironmentVariable('environment') === 'int') {\n    postman.setEnvironmentVariable('pz-gateway domain','https://pz-gateway.stage.geointservices.io');  //pz-exec on int points to pz on stage.\n}\nelse {\n    postman.setEnvironmentVariable('Stage API Key', postman.getEnvironmentVariable('API Key'));  // Don't use different key for \"Get Shoreline\" step.\n    postman.setEnvironmentVariable('pz-gateway domain','https://pz-gateway.' + postman.getEnvironmentVariable('domain'));\n}\nif (postman.getEnvironmentVariable('environment') === 'int' | postman.getEnvironmentVariable('environment') === 'stage') {\n    postman.setEnvironmentVariable('bf-handle Result', '{\\\\\"shoreDataID\\\\\":\\\\\"d408791e-8ca0-41d4-a29f-e9ff441d5efe\\\\\",\\\\\"shoreDeplID\\\\\":\\\\\"72dfce3c-068b-4679-8ee3-d75eaefe1bdd\\\\\",\\\\\"rgbLoc\\\\\":\\\\\"\\\\\",\\\\\"error\\\\\":\\\\\"\\\\\"}');\n}\nelse {\n    postman.setEnvironmentVariable('bf-handle Result', '{\\\\\"shoreDataID\\\\\":\\\\\"2d001e24-5d98-4c02-8a49-ff3a35e24bd3\\\\\",\\\\\"shoreDeplID\\\\\":\\\\\"736a391b-a044-4ae3-953c-68fccd5ceb6f\\\\\",\\\\\"rgbLoc\\\\\":\\\\\"\\\\\",\\\\\"error\\\\\":\\\\\"\\\\\"}');\n}\n\npostman.setEnvironmentVariable('pz auth', 'Basic ' + (postman.getEnvironmentVariable('API Key') + ':').encodeBase64());\npostman.setEnvironmentVariable('bf-handle serviceId','');\npostman.setEnvironmentVariable('pzsvc-image-catalog url','');\npostman.setEnvironmentVariable('Algorithm Name','');\npostman.setEnvironmentVariable('jobId','');\npostman.setEnvironmentVariable('Formatted Content String','');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('shoreDataID', '');\npostman.setEnvironmentVariable('deploymentId', '');\npostman.setEnvironmentVariable('capabilitiesUrl', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 5);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1472130654087,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "c02ab6ff-39a5-5162-1204-3691f8aaf717",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"data": null,
			"dataMode": "params",
			"name": "Validate capabilitiesUrl",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469643398266,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "c08efb39-4af9-49fa-c439-9c9a7e80c2e8",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n        pausecomp(5000);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471279816403,
			"name": "Ingest Text Data",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": [],
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{bf-handle Result}}\",\r\n        \"type\": \"text\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"id": "d6d197e2-394d-a879-18c4-9f639f8bc4c9",
			"headers": "Access-Control-Request-Headers: authorization\nAccess-Control-Request-Method: GET\n",
			"url": "https://pz-gateway.{{domain}}/key",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "OPTIONS",
			"data": null,
			"dataMode": "params",
			"tests": "var header = postman.getResponseHeader(\"Access-Control-Allow-Headers\");\nif (typeof header === 'string') {\n    tests[\"'Access-Control-Allow-Headers' is present (Bug #6218)\"] = true;\n    tests[\"'authorization' header is allowed\"] = header.match(/authorization/i);\n}\nelse {\n    tests[\"'Access-Control-Allow-Headers' is present (Bug #6218)\"] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1472246497256,
			"name": "Get Key Options",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "e8a01848-2a79-76f9-632c-982ee578da20",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "Test.geojson",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"name": "HACK - Ingest Dummy Data",
			"description": "",
			"descriptionFormat": "html",
			"time": 1471280192511,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "eaf75bd7-16a3-e4c3-55a0-491c95a59a9f",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'deployment'\"] = data.type === 'deployment';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('deployment')) {\n        tests[\"data.deployment field present in output\"] = true;\n        if (data.data.deployment.hasOwnProperty('deploymentId')) {\n            tests[\"data.deployment.deploymentId field present in output\"] = true;\n            tests[\"deploymentId is correct\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId');\n        }\n        else {\n            tests[\"data.deployment.deploymentId field present in output\"] = false;\n        }\n        if (data.data.deployment.hasOwnProperty('layer') && typeof data.data.deployment.layer === 'string') {\n            tests[\"data.deployment.layer string field present in output\"] = true;\n            tests[\"GUID created for layer\"] = data.data.deployment.layer.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        }\n        else {\n            tests[\"data.deployment.layer string field present in output\"] = false;\n        }\n        if (data.data.deployment.hasOwnProperty('capabilitiesUrl')) {\n            tests[\"data.deployment.capabilitiesUrl field present\"] = true;\n            postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.deployment.capabilitiesUrl);\n        }\n        else {\n            tests[\"data.deployment.capabilitiesUrl field present\"] = false;\n        }\n    }\n    else {\n        tests[\"data.deployment field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470085291470,
			"name": "Fetch Deployment",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		},
		{
			"id": "fba414ef-7dfc-40bc-4a62-1bde4f087aca",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "{{pz-gateway domain}}/file/{{shoreDataID}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (postman.getEnvironmentVariable('environment') != 'int') {\n    postman.setNextRequest('Deploy Shoreline Data');\n}\n\nif (data.hasOwnProperty('features') && Array.isArray(data.features) && data.features.length > 0) {\n    tests[\"features array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.features.length; i++) {\n        if (data.features[i].hasOwnProperty('geometry')) {\n            tests[\"features[].geometry field present in output\"] = true;\n            if (data.features[i].geometry.hasOwnProperty('coordinates') && Array.isArray(data.features[i].geometry.coordinates)) {\n                tests[\"features[].geometry.coordinates array field present in output\"] = true;\n                tests[\"Coordinates are present\"] = data.features.length > 0;\n            }\n            else {\n                tests[\"features[].geometry.coordinates array field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"features[].geometry field present in output\"] = false;\n        }\n    }\n}\nelse {\n    tests[\"features array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{Stage API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471271808601,
			"name": "Get Shoreline",
			"description": "",
			"collectionId": "65c86921-823a-d9ac-f40b-92a923028da1",
			"responses": []
		}
	]
}