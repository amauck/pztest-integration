{
	"id": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
	"name": "Service_Functions---No_Put_No_Soft_Delete",
	"description": "",
	"order": [
		"87485c88-2b83-b834-2f2d-e8876f250932",
		"1c966c31-d503-2b6e-3741-937b6ca05d9b",
		"5c63e6e5-1683-1d0e-091a-041b6d60eb39",
		"a0272964-4967-534d-5ae5-d5298c43908d",
		"5a2205b5-dbeb-d1b6-1a7b-4dd75ac7593e",
		"c87ba0cb-620d-61df-daca-fac7048fecdf",
		"fbaa2965-e1bc-1e71-4912-679edcb7b449",
		"bc8f1d3c-621b-bdc9-cb56-2bdb5864e086",
		"4a936720-1b14-afc1-dd1e-d49ba2878a75",
		"01982a48-b8ea-0485-a434-95082f884c64",
		"ab02ede0-ce31-70b9-57d6-f4ef2b54d509",
		"1fdafb28-3587-1df8-34ae-359b2e31e71c",
		"739f94df-69b9-e246-516c-7b9a48f58fc9",
		"360bd262-ddfa-e495-2606-9f8aac8c26ae",
		"e7a8404e-218a-cd32-fec4-99d5de213167",
		"c425d8e3-1a08-aa27-4f48-8adfcc0e4d4a",
		"382427ec-653f-3635-1ac1-510bf03ae8bb",
		"a714f88f-b9aa-2bbd-f5f5-ad3f5cfc701e",
		"3cb91296-4919-7128-bca9-e268d5a68589",
		"fe62305a-99e8-12f4-1894-2758d8cb94da"
	],
	"folders": [],
	"timestamp": 1472484283745,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "01982a48-b8ea-0485-a434-95082f884c64",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('dataId')) {\n        tests[\"data.dataId field present in output\"] = true;\n        tests[\"Same dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId');\n    }\n    else {\n        tests[\"data.dataId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('dataType')) {\n        tests[\"data.dataType field present in output\"] = true;\n        if (data.data.dataType.hasOwnProperty('content') && typeof data.data.dataType.content === 'string') {\n            tests[\"data.dataType.content field present in output\"] = true;\n            tests[\"The returned text says hello.\"] = data.data.dataType.content.match(/[Hh](ello|i)/);\n        }\n        else {\n            tests[\"data.dataType.content field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.dataType field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471009678187,
			"name": "Read Data Output",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "1c966c31-d503-2b6e-3741-937b6ca05d9b",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('serviceId') && (typeof data.data.serviceId === 'string' || data.data.serviceId instanceof String)) {\n        tests[\"data.serviceId present in output\"] = true;\n        tests[\"GUID created for serviceId\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"serviceId\",data.data.serviceId);\n    }\n    else{\n        tests[\"data.serviceId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006409993,
			"name": "Register Service",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": [],
			"rawModeData": "{\n    \"url\": \"http://pzsvc-hello.int.geointservices.io/\",\n    \"contractUrl\": \"garbage\",\n    \"method\" : \"GET\",\n    \"serviceId\": \"\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"{{text description}}\"\n    }\n}"
		},
		{
			"id": "1fdafb28-3587-1df8-34ae-359b2e31e71c",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006489453,
			"name": "Confirm Delete",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "360bd262-ddfa-e495-2606-9f8aac8c26ae",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/ThIsIsGaRbAgE",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [
				{
					"key": "softDelete",
					"value": "false",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006552310,
			"name": "Delete Garbage",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "382427ec-653f-3635-1ac1-510bf03ae8bb",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000&page=CAT",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Successful update message\"] = data.message.match(/[Tt]ype/) && data.message.match(/[Ss]tring/);\n}\nelse {\n     tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470946175495,
			"name": "Go to 'CAT' page",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "3cb91296-4919-7128-bca9-e268d5a68589",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message field present\"] = true;\n    tests[\"Authenticate message\"] = data.message.match(/[Aa]uth/);\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1471007112910,
			"name": "Register Service w/o Auth",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "4a936720-1b14-afc1-dd1e-d49ba2878a75",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"data": [],
			"dataMode": "params",
			"name": "Check Job Status",
			"description": "",
			"descriptionFormat": "html",
			"time": 1471008333297,
			"version": 2,
			"responses": [],
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Job Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if(data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if (data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present in output\"] = true;\n                if (data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present in output\"] = true;\n                    tests[\"GUID created for dataId\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable(\"dataId\", data.data.result.dataId);\n                }\n                else {\n                    tests[\"data.result.dataId string field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobType') && typeof data.data.jobType === 'string') {\n        tests[\"data.jobType string field present in output\"] = true;\n        tests[\"Correct jobType\"] = data.data.jobType.match(/[eE]xecute.*[sS]ervice/);\n    }\n    else {\n        tests[\"data.jobType string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobId')) {\n        tests[\"data.jobId field present in output\"] = true;\n        tests[\"Correct jobId used\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n    }\n    else {\n        tests[\"data.jobId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "5a2205b5-dbeb-d1b6-1a7b-4dd75ac7593e",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10&keyword={{text description}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945907144,
			"name": "Filter services by keyword",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "5c63e6e5-1683-1d0e-091a-041b6d60eb39",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('serviceId')) {\n        tests[\"data.serviceId field present in output\"] = true;\n        tests[\"correct serviceId returned\"] = postman.getEnvironmentVariable('serviceId') === data.data.serviceId;\n    }\n    else {\n        tests[\"data.serviceId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('resourceMetadata')) {\n        tests[\"data.resourceMetadata field present in output\"] = true;\n        if (data.data.resourceMetadata.hasOwnProperty('createdOn')) {\n            tests[\"data.resourceMetadata.createdOn field present in output\"] = true;\n        }\n        else {\n            tests[\"data.resourceMetadata.createdOn field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.resourceMetadata field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472484357576,
			"name": "Get Service Info",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "739f94df-69b9-e246-516c-7b9a48f58fc9",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"message field indicates service could not be found.\"] = data.message.has('Service not found');\n}\nelse {\n    tests[\"String message field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006524826,
			"name": "Delete Service Again",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "87485c88-2b83-b834-2f2d-e8876f250932",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('serviceId', '');\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 5)\npostman.setEnvironmentVariable('text description','Search String: ' + Math.random());\npostman.setEnvironmentVariable('New Name', 'THE NAME HAS CHANGED');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1471011509487,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "a0272964-4967-534d-5ae5-d5298c43908d",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('perPage') && typeof data.pagination.perPage === 'number') {\n    tests[\"pagination field (and count/perPage number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.perPage){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    var suggestion = '';\n    if (!all_fit) {suggestion = ' Try changing the perPage parameter'}\n    tests[\"Registered serviceId found in list of services.\" + suggestion] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470944831208,
			"name": "Get List of Srvices",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "a714f88f-b9aa-2bbd-f5f5-ad3f5cfc701e",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 415\"] = responseCode.code === 415;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('error')) {\n    tests[\"error field present\"] = true;\n    tests[\"Correct returned type\"] = data.error === 'Unsupported Media Type';\n}\nelse {\n    tests[\"error field present\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message field present\"] = true;\n    tests[\"Authenticate message\"] = data.message.match(/[Cc]ontent/) && data.message.match(/[Tt]ype/);\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471007418970,
			"name": "Register Service w/o Content-Type",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		},
		{
			"id": "ab02ede0-ce31-70b9-57d6-f4ef2b54d509",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service/{{serviceId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && (typeof data.data.message === 'string' || data.data.serviceId instanceof String)) {\n        tests[\"data.message present in output\"] = true;\n        tests[\"Deleted message\"] = data.data.message.match(/[Dd]elet/);\n    }\n    else{\n        tests[\"data.message field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471006448741,
			"name": "Delete Service",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "bc8f1d3c-621b-bdc9-cb56-2bdb5864e086",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output.\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output.\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else{\n        tests[\"data.jobId string field present in output.\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output.\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471008481639,
			"name": "Create Job",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": [],
			"rawModeData": "{\r\n  \"data\": {\r\n      \"dataInputs\": {},\r\n      \"dataOutput\": [{ \"mimeType\":\"application/json\", \"type\":\"text\" }],\r\n      \"serviceId\": \"{{serviceId}}\"\r\n  },\r\n  \"type\": \"execute-service\"\r\n}"
		},
		{
			"id": "c425d8e3-1a08-aa27-4f48-8adfcc0e4d4a",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000&page=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Successful update message\"] = data.message.match(/[Pp]age/);\n}\nelse {\n     tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470946071729,
			"name": "Go to negative page",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "c87ba0cb-620d-61df-daca-fac7048fecdf",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=1000&userName=citester",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945172163,
			"name": "Filter services by userName",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "e7a8404e-218a-cd32-fec4-99d5de213167",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=10000&page=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Pages are empty beyond the first\"] = data.data.length === 0;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945222260,
			"name": "Go to Non-existent page",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "fbaa2965-e1bc-1e71-4912-679edcb7b449",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/service?perPage=1000&userName=citester&keyword={{text description}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.serviceId});\n    tests[\"Registered serviceId found in list of services.\"] = returned_ids.indexOf(postman.getEnvironmentVariable('serviceId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470945192471,
			"name": "Filter services by keyword AND userName",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": []
		},
		{
			"id": "fe62305a-99e8-12f4-1894-2758d8cb94da",
			"headers": "Authorization: Basic YXNmOTM0ci1mdzA5cjIwLTIzcjAtM3IyMzk6\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401;\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present\"] = false;\n}\nif(data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message field present\"] = true;\n    tests[\"Authenticate message\"] = data.message.match(/[Aa]uth/);\n}\nelse {\n    tests[\"error field present\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "asf934r-fw09r20-23r0-3r239",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471007454546,
			"name": "Register Service w/ bad Auth",
			"description": "",
			"collectionId": "3ad286a0-a188-3ce7-f4d7-7ef1b750a8a8",
			"responses": [],
			"rawModeData": "{\n  \"url\": \"http://pzsvc-hello.venicegeo.io/\",\n  \"contractUrl\": \"http://helloContract\",\n   \"method\" : \"GET\",\n  \"serviceId\": \"\",\n  \"resourceMetadata\": {\n      \"name\": \"pzsvc-hello service\",\n      \"description\": \"Hello World Example\"\n  }\n}"
		}
	]
}