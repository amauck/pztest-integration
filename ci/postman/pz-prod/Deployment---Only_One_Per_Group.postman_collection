{
	"id": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
	"name": "Deployment---Only_One_Per_Group",
	"description": "",
	"order": [
		"201f2958-553d-3178-fba7-7c754f03bffd",
		"4ac7f079-bbd4-0c3b-e50d-8cf3d2fb0167",
		"754b5344-1fda-4f46-cf61-edaf7c4345be",
		"d678d0c7-724e-1211-dbb6-f84332552463",
		"e22c8878-fcfe-2cc7-0370-ff877a6d1426",
		"e4762be4-15bf-57b0-bab3-48bce38204a2",
		"42f28176-b911-a82c-e977-7e3e9bb54079",
		"244c8481-7df3-f025-1050-761d92855df9",
		"039eff18-dc41-73d7-f010-2679845a47b7",
		"240ce45e-cf6f-f8b8-808b-5945517c116b",
		"5449496f-0bfa-42d6-ae0e-302cdb4fe499",
		"a403282d-381e-5eb8-0fb9-c17aff3d5934",
		"16d502db-149e-715e-b94c-1e68e8468200",
		"a9105d66-8a6d-8323-588c-8ce4749099ac",
		"31ae10ae-9e39-9191-148a-de52c19d61d4",
		"7b7720fd-5a65-5275-14f3-2a9c71251710",
		"b84ac7fa-2816-cc6e-9d15-eb53892c86f7",
		"f654984f-6a39-48e3-d5dd-abef5d5be1d0",
		"13f26dec-2d2e-839e-e897-53e317f00374",
		"8f63d669-5798-dde2-66f1-c231af057569",
		"a9014bbd-6a3d-8281-ab65-85917a37b504",
		"7f0bfeaa-73e3-57fc-15c1-3e804b5842cc",
		"6210739d-9e42-1c34-41f4-6741028460c2",
		"37f65535-7465-bba4-58ab-8316220de3c8",
		"4919bcb1-6a08-5500-a97b-341636918dd9",
		"2cf0fb8a-395f-289c-ef0d-41652b34a336",
		"b66c8b42-b446-1804-f9bd-3fd5d3748c0d",
		"7b7186c6-dc58-6acc-8ce2-07232a232d4c",
		"ad343572-2d83-07c0-0ab1-f06647f14302",
		"05bc2e36-fbf0-b8f4-f666-0194e9f1c79f",
		"1da009f2-27d5-1792-f19b-5fcb509447ae",
		"e4ab19b1-e112-30c0-dd49-93de3e598093",
		"48373d54-000c-0dff-7718-4a8ab7fafa83",
		"82095777-9aa3-5d43-42f3-084d75273636",
		"8a0ce95f-2751-9239-f40e-d3e0a7241138",
		"bc6fadd1-0e50-6898-0fd6-72ac1376818d",
		"8dea8077-ca2e-2c36-7a27-919d55aca021",
		"ddb087e9-09e9-c253-35f4-7e34d8638b2d",
		"e3ce2f43-cd1c-95b6-bba1-300cf422cb3d",
		"1f0d2969-0aa8-3533-8ede-c61ee61368bf",
		"9495b832-f745-3f8e-c2ba-d6f7d596e28e",
		"fab7e542-b7d4-94df-c6db-85a3136b46c6",
		"3b1986d1-59ad-572a-3822-999ea01e8421",
		"5fd45878-cf07-49ee-78f1-7e234138a5c3",
		"fed36ee3-8537-c597-450e-1ac1d72b01fd",
		"89adfe34-93e3-1003-fae7-242cf190d6a5",
		"ace22845-f976-fc88-6976-c36a22c73e7d",
		"d8639bb1-399c-e637-0a5d-9fd67df9a60d",
		"978f9db9-b0d5-fd70-ea2f-849fb4d761df",
		"8fdd9102-f03d-7c44-a911-b982b1b4a870"
	],
	"folders": [],
	"timestamp": 1472482136363,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "039eff18-dc41-73d7-f010-2679845a47b7",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633968917,
			"name": "Delete Deployment",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "05bc2e36-fbf0-b8f4-f666-0194e9f1c79f",
			"headers": "Authorization: Basic YmFkLWFwaS1rZXk6\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "bad-api-key",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469474390257,
			"name": "Deploy Data w/ Bad Auth",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "13f26dec-2d2e-839e-e897-53e317f00374",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 404\"] = responseCode.code === 404;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Not exist message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469218772036,
			"name": "Delete Group Again",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "16d502db-149e-715e-b94c-1e68e8468200",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633985563,
			"name": "Deploy Data in Group",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "1da009f2-27d5-1792-f19b-5fcb509447ae",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469121876798,
			"name": "Delete File",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "1f0d2969-0aa8-3533-8ede-c61ee61368bf",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Geojson - Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566061320,
			"name": "Try Geojson - Deployment Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "201f2958-553d-3178-fba7-7c754f03bffd",
			"headers": "",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\ntests[\"Status code is 200\"] = responseCode.code === 200;\npostman.setEnvironmentVariable('retry_loop',0);\npostman.setEnvironmentVariable('max_retries', 5);\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('deploymentId', '');\npostman.setEnvironmentVariable('dataId2', '');\npostman.setEnvironmentVariable('deploymentId2', '');\npostman.setEnvironmentVariable('capabilitiesUrl', '');\npostman.setEnvironmentVariable('deploymentGroupId', '');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1472050208265,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "240ce45e-cf6f-f8b8-808b-5945517c116b",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": null,
			"dataMode": "params",
			"name": "Get Metadata from Deleted Deployment",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469465874027,
			"version": 2,
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 404\"] = responseCode.code === 404;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Not exist message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "244c8481-7df3-f025-1050-761d92855df9",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment?perPage=1000",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar all_fit = true;\nif(data.hasOwnProperty('pagination') && data.pagination.hasOwnProperty('count') && typeof data.pagination.count === 'number' && data.pagination.hasOwnProperty('perPage') && typeof data.pagination.perPage === 'number') {\n    tests[\"pagination field (and count/perPage number sub-fields) present in output\"] = true;\n    if(data.pagination.count > data.pagination.perPage){\n        all_fit = false;\n    }\n}\nelse {\n    tests[\"pagination field (and count/per_page sub-fields) present in output\"] = false;\n}\nif (data.hasOwnProperty('data') && Array.isArray(data.data)) {\n    tests[\"data array field present in output\"] = true;\n    var returned_ids = data.data.map(function(a) {return a.deploymentId});\n    var suggestion = '';\n    if (!all_fit) {suggestion = ' Try changing the perPage parameter'}\n    tests[\"deploymentId found in list.\" + suggestion] = returned_ids.indexOf(postman.getEnvironmentVariable('deploymentId')) != -1;\n}\nelse{\n    tests[\"data array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469216544679,
			"name": "Get Deployment List",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "2cf0fb8a-395f-289c-ef0d-41652b34a336",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && Array.isArray(data.errors) && data.errors.length > 0) {\n    tests[\"errors array field present in output\"] = true;\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"errors[0].field field present in output\"] = true;\n        tests[\"dataId field specified\"] = data.errors[0].field === 'deploymentType';\n    }\n    else {\n        tests[\"data.errors[0].field field present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('code')) {\n        tests[\"errors[0].code field present in output\"] = true;\n        tests[\"NotNull code specified\"] = data.errors[0].code === 'NotNull';\n    }\n    else {\n        tests[\"data.errors[0].code field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"errors array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469544396706,
			"name": "Deploy Data No deploymentType",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "31ae10ae-9e39-9191-148a-de52c19d61d4",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": null,
			"dataMode": "params",
			"name": "Check Service Exists",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469457244986,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "37f65535-7465-bba4-58ab-8316220de3c8",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (w/ bad dataId) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Not exist details\"] = data.data.result.details.match(/[Nn]ot/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469544318780,
			"name": "Check Deployment (w/ bad dataId) Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "3b1986d1-59ad-572a-3822-999ea01e8421",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469121876798,
			"name": "Try Geojson - Delete Data",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "42f28176-b911-a82c-e977-7e3e9bb54079",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'deployment'\"] = data.type === 'deployment';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('deployment')) {\n        tests[\"data.deployment field present in output\"] = true;\n        if (data.data.deployment.hasOwnProperty('deploymentId')) {\n            tests[\"data.deployment.deploymentId field present in output\"] = true;\n            tests[\"deploymentId is correct\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId');\n        }\n        else {\n            tests[\"data.deployment.deploymentId field present in output\"] = false;\n        }\n        if (data.data.deployment.hasOwnProperty('dataId')) {\n            tests[\"data.deployment.dataId field present in output\"] = true;\n            tests[\"dataId is correct\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId');\n        }\n        else {\n            tests[\"data.deployment.dataId field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.deployment field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469215677751,
			"name": "Get Deployment Metadata",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "48373d54-000c-0dff-7718-4a8ab7fafa83",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Text - Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840241255,
			"name": "Try Text - Get dataId",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "4919bcb1-6a08-5500-a97b-341636918dd9",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"'Missing Type' message\"] = data.message.match(/[Mm]issing [Pp]roperty/) && data.message.match(/[Tt]ype/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470943310754,
			"name": "Deploy Data No Type",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\"\r\n}"
		},
		{
			"id": "4ac7f079-bbd4-0c3b-e50d-8cf3d2fb0167",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"somecat.tif\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "somecat.tif",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469724694186,
			"name": "Load File",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "5449496f-0bfa-42d6-ae0e-302cdb4fe499",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 404\"] = responseCode.code === 404;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Not exist message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}\n",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633976299,
			"name": "Delete Deployment Again",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "5fd45878-cf07-49ee-78f1-7e234138a5c3",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"shapefile\" }, \"metadata\": { \"name\": \"TestShape.zip\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "TestShape.zip",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566346219,
			"name": "Try Shape - Ingest copy",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "6210739d-9e42-1c34-41f4-6741028460c2",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": [],
			"dataMode": "raw",
			"name": "Deploy Data Bad dataId",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469461778099,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": "{\r\n  \"dataId\": \"no-data-here\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "754b5344-1fda-4f46-cf61-edaf7c4345be",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633945296,
			"name": "Get dataId",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "7b7186c6-dc58-6acc-8ce2-07232a232d4c",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (w/ bad deploymentType) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Unknown Type Message\"] = data.data.result.details.match(/[Uu]nknown/) && data.data.result.details.match(/[Tt]ype/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469543837171,
			"name": "Check Deployment (w/ bad deploymentType) Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "7b7720fd-5a65-5275-14f3-2a9c71251710",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 500\"] = responseCode.code === 500;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'error'\"] = data.type === 'error';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"The message references deploymentGroupId\"] = data.message.match(postman.getEnvironmentVariable('deploymentGroupId'));\n}\nelse {\n    tests[\"data.message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634631491,
			"name": "Delete Deployment w/o Deleting Group",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "7f0bfeaa-73e3-57fc-15c1-3e804b5842cc",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && Array.isArray(data.errors) && data.errors.length > 0) {\n    tests[\"errors array field present in output\"] = true;\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"errors[0].field field present in output\"] = true;\n        tests[\"dataId field specified\"] = data.errors[0].field === 'dataId';\n    }\n    else {\n        tests[\"data.errors[0].field field present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('code')) {\n        tests[\"errors[0].code field present in output\"] = true;\n        tests[\"NotNull code specified\"] = data.errors[0].code === 'NotNull';\n    }\n    else {\n        tests[\"data.errors[0].code field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"errors array field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470833101276,
			"name": "Deploy Data No dataId",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n    \"deploymentType\": \"geoserver\",\r\n    \"type\": \"access\"\r\n}"
		},
		{
			"id": "82095777-9aa3-5d43-42f3-084d75273636",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840242047,
			"name": "Try Text - Deploy",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "89adfe34-93e3-1003-fae7-242cf190d6a5",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": [],
			"dataMode": "raw",
			"name": "Try Shape - Deploy",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566362471,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "8a0ce95f-2751-9239-f40e-d3e0a7241138",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Text - Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Cannot deploy text message\"] = data.data.result.details.match(/[Tt]ext/) && data.data.result.details.match(/[Tt]ype/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840243015,
			"name": "Try Text - Deployment Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "8dea8077-ca2e-2c36-7a27-919d55aca021",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/data/file",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [
				{
					"key": "data",
					"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A BF TIFF file.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
					"type": "text",
					"enabled": true
				},
				{
					"key": "file",
					"value": "Test.geojson",
					"type": "file",
					"enabled": true
				}
			],
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469624632745,
			"name": "Try Geojson - Ingest",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "8f63d669-5798-dde2-66f1-c231af057569",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634636227,
			"name": "Deploy Data in Deleted Group",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "8fdd9102-f03d-7c44-a911-b982b1b4a870",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": null,
			"dataMode": "params",
			"name": "Try Shape - Delete Deployment",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566495673,
			"version": 2,
			"responses": [],
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "9495b832-f745-3f8e-c2ba-d6f7d596e28e",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469566422195,
			"name": "Try Geojson - Check Url",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "978f9db9-b0d5-fd70-ea2f-849fb4d761df",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": null,
			"dataMode": "params",
			"name": "Try Shape - Delete Data",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566475256,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "a403282d-381e-5eb8-0fb9-c17aff3d5934",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/group",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('deploymentGroupId') && typeof data.data.deploymentGroupId === 'string') {\n        tests[\"data.deploymentGroupId string field present in output\"] = true;\n        tests[\"GUID created for deploymentGroupId\"] = data.data.deploymentGroupId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"deploymentGroupId\",data.data.deploymentGroupId);\n    }\n    else {\n        tests[\"data.deploymentGroupId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470772217849,
			"name": "Create Group",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "a9014bbd-6a3d-8281-ab65-85917a37b504",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (in Deleted Group) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Error') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job had error\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('type')) {\n                    tests[\"data.result.type field present\"] = true;\n                    tests[\"Error type\"] = data.data.result.type === 'error';\n                }\n                else {\n                    tests[\"data.result.type field present\"] = false;\n                }\n                if (data.data.result.hasOwnProperty('details') && typeof data.data.result.details === 'string') {\n                    tests[\"data.result.details string field present\"] = true;\n                    tests[\"Not exist details\"] = data.data.result.details.match(/[Nn]ot/);\n                }\n                else {\n                    tests[\"data.result.details string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634637194,
			"name": "Check Deployment (in Deleted Group) Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "a9105d66-8a6d-8323-588c-8ce4749099ac",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment (in Group) Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \". (Bug #5378)\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469633995327,
			"name": "Check Deployment (in Group) Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "ace22845-f976-fc88-6976-c36a22c73e7d",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Shape - Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469566538615,
			"name": "Try Shape - Deployment Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "ad343572-2d83-07c0-0ab1-f06647f14302",
			"headers": "Content-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 401\"] = responseCode.code === 401",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469476825627,
			"name": "Deploy Data w/o Auth",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "b66c8b42-b446-1804-f9bd-3fd5d3748c0d",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469465256406,
			"name": "Deploy Data Bad deploymentType",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"BAD_TYPE\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "b84ac7fa-2816-cc6e-9d15-eb53892c86f7",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470772236499,
			"name": "Delete Group",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "bc6fadd1-0e50-6898-0fd6-72ac1376818d",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/data/{{dataId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nfunction pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\npausecomp(5000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469559794019,
			"name": "Try Text - Delete Data",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "d678d0c7-724e-1211-dbb6-f84332552463",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469802302661,
			"name": "Deploy Data",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "d8639bb1-399c-e637-0a5d-9fd67df9a60d",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"data": null,
			"dataMode": "params",
			"name": "Try Shape - Check Url",
			"description": "",
			"descriptionFormat": "html",
			"time": 1469566436768,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "ddb087e9-09e9-c253-35f4-7e34d8638b2d",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Geojson - Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469719418262,
			"name": "Try Geojson - Get dataId",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "e22c8878-fcfe-2cc7-0370-ff877a6d1426",
			"headers": "Authorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Check Deployment Status');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if (data.data.result.hasOwnProperty('deployment')) {\n                    tests[\"data.result.deployment field present\"] = true;\n                    if (data.data.result.deployment.hasOwnProperty('deploymentId') && typeof data.data.result.deployment.deploymentId === 'string') {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = true;\n                        postman.setEnvironmentVariable(\"deploymentId\", data.data.result.deployment.deploymentId);\n                        tests[\"data.result.dataId GUID created\"] = data.data.result.deployment.deploymentId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    }\n                    else {\n                        tests[\"data.result.deployment.deploymentId string field present\"] = false;\n                    }\n                    if (data.data.result.deployment.hasOwnProperty('capabilitiesUrl')) {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = true;\n                        postman.setEnvironmentVariable(\"capabilitiesUrl\", data.data.result.deployment.capabilitiesUrl);\n                    }\n                    else {\n                        tests[\"data.result.deployment.capabilitiesUrl field present\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.result.deployemnt field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status] = false;\n        }\n    }\n    else {\n        tests[\"status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469802303211,
			"name": "Check Deployment Status",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "e3ce2f43-cd1c-95b6-bba1-300cf422cb3d",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/deployment",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469461709354,
			"name": "Try Geojson - Deploy",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"dataId\": \"{{dataId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
		},
		{
			"id": "e4762be4-15bf-57b0-bab3-48bce38204a2",
			"headers": "",
			"url": "{{capabilitiesUrl}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1469633963405,
			"name": "Check Service Exists",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "e4ab19b1-e112-30c0-dd49-93de3e598093",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/data",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('jobId') && typeof data.data.jobId === 'string') {\n        tests[\"data.jobId string field present in output\"] = true;\n        tests[\"GUID created for jobId\"] = data.data.jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"jobId\",data.data.jobId);\n        pausecomp(5000);\n    }\n    else {\n        tests[\"data.jobId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840240312,
			"name": "Try Text - Ingest",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": [],
			"rawModeData": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"The string goes here!\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"some text :)\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
		},
		{
			"id": "f654984f-6a39-48e3-d5dd-abef5d5be1d0",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469634625403,
			"name": "Delete Deployment in Group",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "fab7e542-b7d4-94df-c6db-85a3136b46c6",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\ntests[\"Status code is 200\"] = responseCode.code === 200;\nif (data.hasOwnProperty('type')) {\n    tests[\"type field present in output\"] = true;\n    tests[\"type is 'success'\"] = data.type === 'success';\n}\nelse {\n    tests[\"type field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Deletion message\"] = data.data.message.match(/[Dd]elet/) && !data.data.message.match(/[Gg]roup/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n    tests[\"Output: \" + responseBody] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469556790739,
			"name": "Try Geojson - Delete Deployment",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		},
		{
			"id": "fed36ee3-8537-c597-450e-1ac1d72b01fd",
			"headers": "Authorization: Basic MTMzOTU5OTQtMzg1OC00MzE1LThiYzEtMjkyN2RmZTRkNDgzOg==\n",
			"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('status')) {\n        tests[\"data.status field present in output\"] = true;\n        if (data.data.status === 'Running' || data.data.status === 'Submitted') {\n            if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n                postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n                postman.setNextRequest('Try Shape - Get dataId');\n                pausecomp(1000);\n            }\n            else {\n                tests[\"Job finished in time\"] = false;\n            }\n        }\n        else if (data.data.status === 'Success') {\n            postman.setEnvironmentVariable('retry_loop',0);\n            tests[\"Job finished in time\"] = true;\n            if(data.data.hasOwnProperty('result')) {\n                tests[\"data.result field present\"] = true;\n                if(data.data.result.hasOwnProperty('dataId') && typeof data.data.result.dataId === 'string') {\n                    tests[\"data.result.dataId string field present\"] = true;\n                    postman.setEnvironmentVariable(\"dataId\",data.data.result.dataId);\n                    tests[\"data.result.dataId GUID created\"] = data.data.result.dataId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                }\n                else {\n                    tests[\"data.result.dataId string field present\"] = false;\n                }\n            }\n            else {\n                tests[\"data.result field present\"] = false;\n            }\n        }\n        else {\n            tests[\"status should not be \" + data.data.status + \".\"] = false;\n            tests[\"Output: \" + responseBody] = false;\n            postman.setNextRequest('');\n        }\n    }\n    else {\n        tests[\"data.status field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1469719428383,
			"name": "Try Shape - Get dataId",
			"description": "",
			"collectionId": "5fca1118-451a-8cb6-063b-edbf048ba7b6",
			"responses": []
		}
	]
}