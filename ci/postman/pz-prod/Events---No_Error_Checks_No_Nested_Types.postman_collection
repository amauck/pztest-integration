{
	"id": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
	"name": "Events---No_Error_Checks_No_Nested_Types",
	"description": "",
	"order": [
		"6b63036b-fefc-caaf-16fb-c17ed163b5d7",
		"f6f0a198-cc98-1fb2-d4c1-45bd8bc28363",
		"470de097-5aba-a0d4-5ff5-5d747de69eaf",
		"d28a1bdb-3d70-83cf-b32c-b486f0bfa243",
		"9184609a-be5b-37bc-3ea6-17a0549edd9d",
		"d655c133-8e9e-b616-3abd-da62d1e6485b",
		"5c544eca-dd0c-1506-e66a-0c1ff07b1b21",
		"7fe94548-4191-405f-ee73-bae164e60785",
		"a75469f2-eb0e-7493-8a24-26ac8bff0f4e",
		"58e94439-7e8f-a72f-6b7a-a6854f640c52",
		"26f4f680-9b50-ca8c-9bb9-077ec095e222",
		"ddadf81c-b7a5-5456-a195-4a912a302afd",
		"4b3844c5-ce66-bead-3859-d9bc59ee1dab",
		"27464bf4-4582-4e9d-bc98-bd5f666454ca",
		"9c76ec1d-1e98-8a14-3a83-a46b6e2e2614",
		"07f77d5b-9642-c39e-ed58-2c0c02b050fb",
		"bf1b2f8d-c301-7765-1f4f-cfd910ea465f",
		"1a4b7f3b-8381-312a-7c14-857ed17a1ca8",
		"c58595e7-1b41-a3f5-f169-2608c0cd5161",
		"23d196e6-86e6-2b50-ec10-30613087d2c3",
		"494c5012-1a9c-2f44-f0f1-626ed64b7e62",
		"27ee4b89-3fa9-b5c1-d16d-41dbaa242043",
		"e8ca35fa-36c1-d0d6-2beb-8c3743f74e92",
		"39dff595-84d7-2d98-368b-bcbb32b5485e",
		"f3a54f6f-f020-b94d-234d-7225d944203b",
		"b65dbe3a-6e1a-eac1-f672-b8b1c4f49536",
		"365c1433-68a2-1bac-d950-76818bb187c0",
		"8ee80557-46a2-8bdc-da9e-567b05c88676",
		"b2c19920-3cb3-f056-e5f2-0206c905324e",
		"11d83199-ae59-55df-c2e8-33e71c2b3aa6",
		"7ec822ed-be31-18a4-ee3f-c07a1cf766a9",
		"6778105f-908f-a254-54cd-ad898b8b839d"
	],
	"folders": [],
	"timestamp": 1472245427885,
	"owner": "699425",
	"public": false,
	"published": false,
	"requests": [
		{
			"id": "07f77d5b-9642-c39e-ed58-2c0c02b050fb",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404 (Bug #5699) / (Bug #5977)\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482628436,
			"name": "Get Deleted Event",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "11d83199-ae59-55df-c2e8-33e71c2b3aa6",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'name';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470326468262,
			"name": "Create EventType - Missing 'name'",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "1a4b7f3b-8381-312a-7c14-857ed17a1ca8",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"data": null,
			"dataMode": "params",
			"name": "Confirm No Alert Created",
			"description": "",
			"descriptionFormat": "html",
			"time": 1470841087312,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId') && data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (data.data[i].hasOwnProperty('alertId') && typeof data.data[i].alertId === 'string') {\n                    tests[\"data[].alertId string field present in output\"] = true;\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                else {\n                    tests[\"data[].alertId string field present in output\"] = false;\n                }\n                if (data.data[i].hasOwnProperty('jobId') && typeof data.data[i].jobId === 'string') {\n                    tests[\"data[].jobId string field present in output\"] = true;\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId', data.data[i].jobId);\n                }\n                else {\n                    tests[\"data[].jobId string field present in output\"] = false;\n                }\n            }\n        }\n        else {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = false;\n            break;\n        }\n    }\n    tests[\"Non-triggering event not found.\"] = !found;\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			}
		},
		{
			"id": "23d196e6-86e6-2b50-ec10-30613087d2c3",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct triggerId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('triggerId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470341763060,
			"name": "Delete Trigger",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "26f4f680-9b50-ca8c-9bb9-077ec095e222",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].eventId field present in output\"] = true;\n            if (data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n            }\n        }\n        else {\n            tests[\"data[].eventId field present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"eventId found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setNextRequest('Query Events');\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            pausecomp(1000);\n        }\n        else {\n            tests[\"eventId found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032413771,
			"name": "Query Events",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": []
		},
		{
			"id": "27464bf4-4582-4e9d-bc98-bd5f666454ca",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471524015444,
			"name": "Delete Event",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "27ee4b89-3fa9-b5c1-d16d-41dbaa242043",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482648902,
			"name": "Get Deleted Trigger",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "365c1433-68a2-1bac-d950-76818bb187c0",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 404\"] = responseCode.code === 404;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482702547,
			"name": "Get Deleted EventType",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "39dff595-84d7-2d98-368b-bcbb32b5485e",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'eventTypeId';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470342475129,
			"name": "Create Event - No EventTypeId",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\t\n      \"mapping\": {\n\t\t\"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": \"3\",\n\t\t\"minX\": \"1.0\",\n\t\t\"minY\": \"1.0\",\n\t\t\"maxX\": \"10.0\",\n\t\t\"maxY\": \"10.0\",\n\t\t\"hosted\": true\n      }\n    }\n}"
		},
		{
			"id": "470de097-5aba-a0d4-5ff5-5d747de69eaf",
			"headers": "Content-Type: application/json\nAuthorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]ype/) && data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventTypeId')) {\n        tests[\"data.eventTypeId field present in output\"] = true;\n        tests[\"Correct eventTypeId returned\"] = data.data.eventTypeId === postman.getEnvironmentVariable('eventTypeId');\n    }\n    else {\n        tests[\"data.eventTypeId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470930452931,
			"name": "Get EventType",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "494c5012-1a9c-2f44-f0f1-626ed64b7e62",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482639839,
			"name": "Delete Trigger Again",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "4b3844c5-ce66-bead-3859-d9bc59ee1dab",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/alert/{{alertId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Aa]lert/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId')) {\n        tests[\"data.eventId field present in output\"] = true;\n        tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n    }\n    else {\n        tests[\"data.eventId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('alertId')) {\n        tests[\"data.alertId field present in output\"] = true;\n        tests[\"Correct alertId returned\"] = data.data.alertId === postman.getEnvironmentVariable('alertId');\n    }\n    else {\n        tests[\"data.alertId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('triggerId')) {\n        tests[\"data.triggerId field present in output\"] = true;\n        tests[\"Correct triggerId returned\"] = data.data.triggerId === postman.getEnvironmentVariable('triggerId');\n    }\n    else {\n        tests[\"data.triggerId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('jobId')) {\n        tests[\"data.jobId field present in output\"] = true;\n        tests[\"Correct jobId returned\"] = data.data.jobId === postman.getEnvironmentVariable('jobId');\n    }\n    else {\n        tests[\"data.jobId field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('createdBy')) {\n        tests[\"data.createdBy field present in output\"] = true;\n    }\n    else {\n        tests[\"data.createdBy field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482577705,
			"name": "Get Alert",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": []
		},
		{
			"id": "58e94439-7e8f-a72f-6b7a-a6854f640c52",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId')) {\n        tests[\"data.eventId field present in output\"] = true;\n        tests[\"Correct eventId returned\"] = data.data.eventId === postman.getEnvironmentVariable('eventId');\n    }\n    else {\n        tests[\"data.eventId field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840250855,
			"name": "Get Event",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "5c544eca-dd0c-1506-e66a-0c1ff07b1b21",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger/{{triggerId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('triggerId') && typeof data.data.triggerId === 'string') {\n        tests[\"data.triggerId string field present in output\"] = true;\n        tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n    }\n    else {\n        tests[\"data.triggerId string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('condition')) {\n        tests[\"data.condition field present in output\"] = true;\n        if (data.data.condition.hasOwnProperty('eventTypeIds') && Array.isArray(data.data.condition.eventTypeIds) && data.data.condition.eventTypeIds.length === 1) {\n            tests[\"data.condition.eventTypeIds field present in output and contains one element\"] = true;\n            tests[\"Correct eventTypeId used\"] = data.data.condition.eventTypeIds[0] === postman.getEnvironmentVariable('eventTypeId');\n        }\n        else {\n            tests[\"data.condition.eventTypeIds field present in output and contains one element\"] = false;\n        }\n    }\n    if (data.data.hasOwnProperty('job')) {\n        tests[\"data.job field present in output\"] = true;\n        if (data.data.job.hasOwnProperty('jobType')) {\n            tests[\"data.job.jobType field present in output\"] = true;\n            if (data.data.job.jobType.hasOwnProperty('data')) {\n                tests[\"data.job.jobType.data field present in output\"] = true;\n                if (data.data.job.jobType.data.hasOwnProperty('serviceId')) {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = true;\n                    tests[\"Correct serviceId used\"] = data.data.job.jobType.data.serviceId === postman.getEnvironmentVariable('serviceId');\n                }\n                else {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = false;\n                }\n            }\n            else {\n                tests[\"data.job.jobType.data field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"data.job.jobType field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.job field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470840248319,
			"name": "Get Trigger",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
		},
		{
			"id": "6778105f-908f-a254-54cd-ad898b8b839d",
			"headers": "Content-Type: application/json\nAuthorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-workflow.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Type unrecognized message.\"] = (data.message.match(/[Vv]alid/) || data.message.match(/[Hh]andle/)) && data.message.match(/[Tt]ype/) && data.message.match(/bad/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472245865572,
			"name": "Create EventType - Invalid Data Type",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\",\r\n    \"badParam\": \"bad\"\r\n  }\r\n}  "
		},
		{
			"id": "6b63036b-fefc-caaf-16fb-c17ed163b5d7",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Says Hello!\"] = responseBody.has('Hello');\npostman.setEnvironmentVariable('eventTypeId', '');\npostman.setEnvironmentVariable('serviceId', '');\npostman.setEnvironmentVariable('triggerId', '');\npostman.setEnvironmentVariable('eventId', '');\npostman.setEnvironmentVariable('alertId', '');\npostman.setEnvironmentVariable('jobId', '');\npostman.setEnvironmentVariable('dataId', '');\npostman.setEnvironmentVariable('retry_loop', 0);\npostman.setEnvironmentVariable('max_retries', 5);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032480808,
			"name": "Hello, pz-gateway!",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": []
		},
		{
			"id": "7ec822ed-be31-18a4-ee3f-c07a1cf766a9",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'mapping';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470335401725,
			"name": "Create EventType - Missing 'mapping'",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n\t\"name\": \"{{$timestamp}}\"\r\n}\t"
		},
		{
			"id": "7fe94548-4191-405f-ee73-bae164e60785",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId')) {\n            tests[\"data[].triggerId field present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId')) {\n                found = true;\n            }\n        }\n        else {\n            tests[\"data[].triggerId field present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"triggerId found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setNextRequest('Query Triggers');\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            pausecomp(1000);\n        }\n        else {\n            tests[\"triggerId found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032421998,
			"name": "Query Triggers",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": []
		},
		{
			"id": "8ee80557-46a2-8bdc-da9e-567b05c88676",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400 (Bug #5994)\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482840273,
			"name": "Create Trigger - Deleted eventTypeId",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"condition\": {\n        \"eventTypeIds\": [\"{{eventTypeId}}\"],\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"data.dataType\": \"raster\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"id": "9184609a-be5b-37bc-3ea6-17a0549edd9d",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\nContent-Type: application/json\n",
			"url": "https://pz-gateway.{{domain}}/service",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200 or 201\"] = responseCode.code === 200 || responseCode.code === 201;  // Fix once stage returns 201 on POSTs.\nvar data = JSON.parse(responseBody);\nif(data.hasOwnProperty('type')) {\n    tests[\"type field present.\"] = true;\n    tests[\"Correct returned type\"] = data.type === 'service-id';\n}\nelse {\n    tests[\"type field present.\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output.\"] = true;\n    if (data.data.hasOwnProperty('serviceId') && typeof data.data.serviceId === 'string') {\n        tests[\"data.serviceId string field present in output.\"] = true;\n        tests[\"GUID created for serviceId\"] = data.data.serviceId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable(\"serviceId\",data.data.serviceId);\n    }\n    else{\n        tests[\"data.serviceId string field present in output.\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output.\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470930453668,
			"name": "Register Service",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"url\": \"http://pzsvc-hello.int.geointservices.io/\",\n    \"contractUrl\": \"http://helloContract\",\n    \"method\" : \"GET\",\n    \"serviceId\": \"\",\n    \"resourceMetadata\": {\n        \"classType\": \"hello\",\n        \"name\": \"pzsvc-hello service\",\n        \"description\": \"~!~ xXx Ultra-specific example just for this test xXx ~!~\"\n    }\n}"
		},
		{
			"id": "9c76ec1d-1e98-8a14-3a83-a46b6e2e2614",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482618244,
			"name": "Delete Event Again",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "a75469f2-eb0e-7493-8a24-26ac8bff0f4e",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId') && typeof data.data.eventId === 'string') {\n        tests[\"data.eventId string field present in output\"] = true;\n        tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventId', data.data.eventId);\n    }\n    else {\n        tests[\"data.eventId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472245473384,
			"name": "Create Event",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"maxY\": 10.0,\n\t\t\"hosted\": true\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "b2c19920-3cb3-f056-e5f2-0206c905324e",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"EventType does not exist message\"] = data.message.match(/[Nn]ot/) && data.message.match(/[Ee]vent\\s?[Tt]ype/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470334487719,
			"name": "Create Event - Deleted eventTypeId",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\t\n      \"mapping\": {\n\t\t\"dataId\": \"testId\",\n\t\t\"dataType\": \"raster\",\n\t\t\"epsg\": \"3\",\n\t\t\"minX\": \"1.0\",\n\t\t\"minY\": \"1.0\",\n\t\t\"maxX\": \"10.0\",\n\t\t\"maxY\": \"10.0\",\n\t\t\"hosted\": true\n      }\n  },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "b65dbe3a-6e1a-eac1-f672-b8b1c4f49536",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var data = JSON.parse(responseBody);\nif (data.hasOwnProperty('message') && typeof data.message === 'string') {\n    tests[\"message string field present in output\"] = true;\n    tests[\"Failure message\"] = data.message.match(/[Nn]ot/);\n}\nelse {\n    tests[\"message string field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482694264,
			"name": "Delete EventType Again",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "bf1b2f8d-c301-7765-1f4f-cfd910ea465f",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventId') && typeof data.data.eventId === 'string') {\n        tests[\"data.eventId string field present in output\"] = true;\n        tests[\"eventId GUID created\"] = data.data.eventId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventId', data.data.eventId);\n    }\n    else {\n        tests[\"data.eventId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471625711998,
			"name": "Create Non-triggering Event",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"dataId\": \"testId\",\n\t\t\"dataType\": \"graster\",\n\t\t\"epsg\": 3,\n\t\t\"minX\": 1,\n\t\t\"minY\": 1.0,\n\t\t\"maxX\": 10.0,\n\t\t\"maxY\": 10.0,\n\t\t\"hosted\": true,\n        \"sampleNest\": {\n            \"someParam\": \"someValue\"\n        }\n    },\n  \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "c58595e7-1b41-a3f5-f169-2608c0cd5161",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event/{{eventId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}\npausecomp(1000);",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472071392559,
			"name": "Delete Non-triggering Event",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "d28a1bdb-3d70-83cf-b32c-b486f0bfa243",
			"headers": "Authorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/eventType?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('eventTypeId')) {\n            tests[\"data[].eventTypeId field present in output\"] = true;\n            if (data.data[i].eventTypeId === postman.getEnvironmentVariable('eventTypeId')) {\n                found = true;\n            }\n        }\n        else {\n            tests[\"data[].eventTypeId field present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"eventTypeId found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setNextRequest('Query EventTypes');\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            pausecomp(1000);\n        }\n        else {\n            tests[\"eventTypeId found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1471032429362,
			"name": "Query EventTypes",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": []
		},
		{
			"id": "d655c133-8e9e-b616-3abd-da62d1e6485b",
			"headers": "Content-Type: application/json\nAuthorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/trigger",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]rigger/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('triggerId') && typeof data.data.triggerId === 'string') {\n        tests[\"data.triggerId string field present in output\"] = true;\n        tests[\"triggerId GUID created\"] = data.data.triggerId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('triggerId', data.data.triggerId);\n    }\n    else {\n        tests[\"data.triggerId string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('createdBy') && typeof data.data.createdBy === 'string') {\n        tests[\"data.createdBy string field present in output\"] = true;\n        postman.setEnvironmentVariable('createdBy', data.data.createdBy);\n    }\n    else {\n        tests[\"data.createdBy string field present in output\"] = false;\n    }\n    if (data.data.hasOwnProperty('condition')) {\n        tests[\"data.condition field present in output\"] = true;\n        if (data.data.condition.hasOwnProperty('eventTypeIds') && Array.isArray(data.data.condition.eventTypeIds) && data.data.condition.eventTypeIds.length === 1) {\n            tests[\"data.condition.eventTypeIds field present in output and contains one element\"] = true;\n            tests[\"Correct eventTypeId used\"] = data.data.condition.eventTypeIds[0] === postman.getEnvironmentVariable('eventTypeId');\n        }\n        else {\n            tests[\"data.condition.eventTypeIds field present in output and contains one element\"] = false;\n        }\n    }\n    if (data.data.hasOwnProperty('job')) {\n        tests[\"data.job field present in output\"] = true;\n        if (data.data.job.hasOwnProperty('jobType')) {\n            tests[\"data.job.jobType field present in output\"] = true;\n            if (data.data.job.jobType.hasOwnProperty('data')) {\n                tests[\"data.job.jobType.data field present in output\"] = true;\n                if (data.data.job.jobType.data.hasOwnProperty('serviceId')) {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = true;\n                    tests[\"Correct serviceId used\"] = data.data.job.jobType.data.serviceId === postman.getEnvironmentVariable('serviceId');\n                }\n                else {\n                    tests[\"data.job.jobType.data.serviceId field present in output\"] = false;\n                }\n                if (data.data.job.jobType.data.hasOwnProperty('dataInputs')) {\n                    tests[\"data.job.jobType.data.dataInputs field present in output\"] = true;\n                    if (data.data.job.jobType.data.dataInputs.hasOwnProperty('test')) {\n                        tests[\"data.job.jobType.data.dataInputs.test field present in output\"] = true;\n                        if (data.data.job.jobType.data.dataInputs.test.hasOwnProperty('type')) {\n                            tests[\"data.job.jobType.data.dataInputs.test.type field present in output\"] = true;\n                        }\n                        else {\n                            tests[\"data.job.jobType.data.dataInputs.test.type field present in output\"] = false;\n                        }\n                    }\n                    else {\n                        tests[\"data.job.jobType.data.dataInputs.test field present in output\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.job.jobType.data.dataInputs field present in output\"] = false;\n                }\n                if (data.data.job.jobType.data.hasOwnProperty('dataOutput') && Array.isArray(data.data.job.jobType.data.dataOutput) && data.data.job.jobType.data.dataOutput.length === 1) {\n                    tests[\"data.job.jobType.data.dataOutput array field present in output and has one element\"] = true;\n                    if (data.data.job.jobType.data.dataOutput[0].hasOwnProperty('type')) {\n                        tests[\"data.job.jobType.data.dataOutput[0].type field present in output\"] = true;\n                    }\n                    else {\n                        tests[\"data.job.jobType.data.dataOutput[0].type field present in output\"] = false;\n                    }\n                }\n                else {\n                    tests[\"data.job.jobType.data.dataOutput array field present in output and has one element\"] = false;\n                }\n            }\n            else {\n                tests[\"data.job.jobType.data field present in output\"] = false;\n            }\n        }\n        else {\n            tests[\"data.job.jobType field present in output\"] = false;\n        }\n    }\n    else {\n        tests[\"data.job field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482551336,
			"name": "Create Trigger",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"name\": \"CI Testing Trigger\",\n    \"enabled\": true,\n    \"condition\": {\n        \"eventTypeIds\": [\"{{eventTypeId}}\"],\n        \"query\": {\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"dataType\": \"raster\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"job\": {\n        \"jobType\": {\n            \"type\": \"execute-service\",\n            \"data\": {\n                \"serviceId\": \"{{serviceId}}\",\n                \"dataInputs\": {\n                    \"test\": {\n                        \"content\": \"{ \\\"log\\\": \\\"Received event with type $dataType\\\" }\",\n                        \"type\": \"body\",\n                        \"mimeType\": \"application/json\"\n                    }\n                },\n                \"dataOutput\": [ {\n                    \"content\": \"filler text\",\n                    \"mimeType\":\"application/json\",\n                    \"type\":\"text\"\n                } ]\n            }\n        }\n    }\n}"
		},
		{
			"id": "ddadf81c-b7a5-5456-a195-4a912a302afd",
			"headers": "Authorization: Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/alert?perPage=1000&order=desc&sortBy=createdOn",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date < millis);\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar found = false;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('data') && Array.isArray(data.data) && data.data.length > 0) {\n    tests[\"data array field present in output and is not empty\"] = true;\n    for (i = 0; i < data.data.length; i++) {\n        if (data.data[i].hasOwnProperty('triggerId') && data.data[i].hasOwnProperty('eventId')) {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = true;\n            if (data.data[i].triggerId === postman.getEnvironmentVariable('triggerId') && data.data[i].eventId === postman.getEnvironmentVariable('eventId')) {\n                found = true;\n                if (data.data[i].hasOwnProperty('alertId') && typeof data.data[i].alertId === 'string') {\n                    tests[\"data[].alertId string field present in output\"] = true;\n                    tests[\"alertId GUID created\"] = data.data[i].alertId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('alertId', data.data[i].alertId);\n                }\n                else {\n                    tests[\"data[].alertId string field present in output\"] = false;\n                }\n                if (data.data[i].hasOwnProperty('jobId') && typeof data.data[i].jobId === 'string') {\n                    tests[\"data[].jobId string field present in output\"] = true;\n                    tests[\"jobId GUID created\"] = data.data[i].jobId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n                    postman.setEnvironmentVariable('jobId', data.data[i].jobId);\n                }\n                else {\n                    tests[\"data[].jobId string field present in output\"] = false;\n                }\n            }\n        }\n        else {\n            tests[\"data[].triggerId & data[].eventId fields present in output\"] = false;\n            break;\n        }\n    }\n    if (found) {\n        tests[\"alert found\"] = true;\n        postman.setEnvironmentVariable('retry_loop', 0);\n    }\n    else {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Find Alert');\n            pausecomp(1000);\n        }\n        else {\n            tests[\"alert found\"] = false;\n            postman.setEnvironmentVariable('retry_loop', 0);\n        }\n    }\n}\nelse {\n    tests[\"data array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470930662240,
			"name": "Find Alert",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": []
		},
		{
			"id": "e8ca35fa-36c1-d0d6-2beb-8c3743f74e92",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==\n",
			"url": "https://pz-gateway.{{domain}}/event",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 400\"] = responseCode.code === 400;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('errors') && data.errors.length > 0) {\n    tests[\"errors array field present in output and is not empty\"] = true;\n    if (data.errors[0].hasOwnProperty('defaultMessage')) {\n        tests[\"data.errors[0].defaultMessage present in output\"] = true;\n        tests[\"'may not be null' message\"] = data.errors[0].defaultMessage === 'may not be null';\n    }\n    else {\n        tests[\"data.errors[0].defaultMessage present in output\"] = false;\n    }\n    if (data.errors[0].hasOwnProperty('field')) {\n        tests[\"data.errors[0].field present in output\"] = true;\n        tests[\"Correct field specified\"] = data.errors[0].field === 'data';\n    }\n    else {\n        tests[\"data.errors[0].field present in output\"] = false;\n    }   \n}\nelse {\n    tests[\"errors array field present in output and is not empty\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1470342789640,
			"name": "Create Event - No Data",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\n    \"eventTypeId\": \"{{eventTypeId}}\"\n}"
		},
		{
			"id": "f3a54f6f-f020-b94d-234d-7225d944203b",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType/{{eventTypeId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('message') && typeof data.data.message === 'string') {\n        tests[\"data.message string field present in output\"] = true;\n        tests[\"Correct eventTypeId deleted\"] = data.data.message.match(postman.getEnvironmentVariable('eventTypeId'));\n        tests[\"Successful deletion message\"] = data.data.message.match(/[Ss]uccess/) && data.data.message.match(/[Dd]elet/);\n    }\n    else {\n        tests[\"data.message string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472482687756,
			"name": "Delete EventType",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "f6f0a198-cc98-1fb2-d4c1-45bd8bc28363",
			"headers": "Content-Type: application/json\nAuthorization: Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==\n",
			"url": "https://pz-gateway.{{domain}}/eventType",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201 (Bug #6162)\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nif (data.hasOwnProperty('type') && typeof data.type === 'string') {\n    tests[\"type string field present in output\"] = true;\n    tests[\"Correct Type\"] = data.type.match(/[Tt]ype/) && data.type.match(/[Ee]vent/);\n}\nelse {\n    tests[\"type string field present in output\"] = false;\n}\nif (data.hasOwnProperty('data')) {\n    tests[\"data field present in output\"] = true;\n    if (data.data.hasOwnProperty('eventTypeId') && typeof data.data.eventTypeId === 'string') {\n        tests[\"data.eventTypeId string field present in output\"] = true;\n        tests[\"eventTypeId GUID created\"] = data.data.eventTypeId.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n        postman.setEnvironmentVariable('eventTypeId', data.data.eventTypeId);\n    }\n    else {\n        tests[\"data.eventTypeId string field present in output\"] = false;\n    }\n}\nelse {\n    tests[\"data field present in output\"] = false;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{API Key}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1472245456294,
			"name": "Create EventType",
			"description": "",
			"collectionId": "75ecf975-145d-96d7-6f7c-1088f7bc15e9",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"{{$timestamp}}\",\r\n  \"mapping\": {\r\n    \"dataId\": \"string\",\r\n    \"dataType\": \"string\",\r\n    \"epsg\": \"short\",\r\n    \"minX\": \"long\",\r\n    \"minY\": \"long\",\r\n    \"maxX\": \"long\",\r\n    \"maxY\": \"long\",\r\n    \"hosted\": \"boolean\"\r\n  }\r\n}  "
		}
	]
}