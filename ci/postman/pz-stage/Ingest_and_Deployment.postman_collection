{
	"variables": [],
	"info": {
		"name": "Ingest_and_Deployment",
		"_postman_id": "2cc18137-6a8d-22d4-51ec-e369c240cb00",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1_Startup",
			"description": "",
			"item": [
				{
					"name": "Hello, pz-gateway!",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Says Hello!\"] = responseBody.has('Hello');",
									"postman.setEnvironmentVariable('retry_loop',0);",
									"postman.setEnvironmentVariable('max_retries', 9);",
									"postman.setEnvironmentVariable('Ingested Text', 'This is the ingested text for integration tests!');",
									"postman.setEnvironmentVariable('Ingested Geojson', '{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"geometry\": {\"type\": \"Point\",\"coordinates\": [102.0,0.5]},\"properties\": {\"prop0\": \"value0\"}},{\"type\": \"Feature\",\"geometry\": {\"type\": \"Point\",\"coordinates\": [106.0,4]},\"properties\": {\"prop0\": \"value0\"}}]}');",
									"postman.setEnvironmentVariable('jobId','');",
									"postman.setEnvironmentVariable('jobId_text','');",
									"postman.setEnvironmentVariable('dataId_text','');",
									"postman.setEnvironmentVariable('jobId_geojson','');",
									"postman.setEnvironmentVariable('dataId_geojson','');",
									"postman.setEnvironmentVariable('jobId_raster','');",
									"postman.setEnvironmentVariable('dataId_raster','');",
									"postman.setEnvironmentVariable('jobId_shape','');",
									"postman.setEnvironmentVariable('dataId_shape','');",
									"postman.setEnvironmentVariable('jobId_external','');",
									"postman.setEnvironmentVariable('dataId_external','');",
									"postman.setEnvironmentVariable('deploymentId_geojson','');",
									"postman.setEnvironmentVariable('deploymentId_external','');",
									"postman.setEnvironmentVariable('deploymentGroupId','');",
									"postman.setEnvironmentVariable('deploymentId_raster','');",
									"postman.setEnvironmentVariable('deploymentId_shape','');",
									"postman.setEnvironmentVariable('capabilitiesUrl','');",
									"postman.setEnvironmentVariable('dataId_geojson_large','');",
									"postman.setEnvironmentVariable('deploymentId_geojson_large','');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
									"console.log(\"< < < < < < < < < < < < < START-UP > > > > > > > > > > > \");",
									"console.log(\"   These tests create required environment variables.    \");",
									"console.log(\"    Any failures here will cause other tests to fail.    \");",
									"console.log(\"            DO NOT PUSH if these tests fail.             \");",
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
								]
							}
						}
					],
					"request": {
						"url": "https://pz-gateway.{{domain}}/",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic Y2l0ZXN0ZXI6Y2l0ZXN0ZXI=",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId_text\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Text dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get Text dataId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.dataId')) {",
									"            postman.setEnvironmentVariable(\"dataId_text\", data.data.result.dataId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId_text}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest GeoJSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId_geojson\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/file",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "Test.geojson"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get GeoJSON dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get GeoJSON dataId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.dataId')) {",
									"            postman.setEnvironmentVariable(\"dataId_geojson\", data.data.result.dataId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Raster",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId_raster\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/file",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "terrametrics.tif"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Raster dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get Raster dataId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.dataId')) {",
									"            postman.setEnvironmentVariable(\"dataId_raster\", data.data.result.dataId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Shape",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId_shape\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/file",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"shapefile\" }, \"metadata\": { \"name\": \"TestShape.zip\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "TestShape.zip"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Shape dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get Shape dataId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.dataId')) {",
									"            postman.setEnvironmentVariable(\"dataId_shape\", data.data.result.dataId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId_shape}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest External Raster",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId_external\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmQ4NGYwNGMtZGVmMC00NjQ1LWJiZmItNTJmMGQ2M2NlZjRlOg==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"ingest\",\n  \"host\": \"false\",\n  \"data\": {\n    \"dataType\": {\n      \"type\": \"raster\",\n      \"location\": {\n        \"type\": \"s3\",\n        \"bucketName\": \"external-public-access-test\",\n        \"fileName\": \"elevation.tif\",\n        \"domainName\": \"s3.amazonaws.com\"\n      }\n    },\n    \"metadata\": {\n      \"name\": \"My Test raster external file\",\n      \"description\": \"A file for integration tests.\",\n      \"classType\": \"unclassified\"\n    }\n  }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get External Raster dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get External Raster dataId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.dataId')) {",
									"            postman.setEnvironmentVariable(\"dataId_external\", data.data.result.dataId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId_external}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2_Critical",
			"description": "",
			"item": [
				{
					"name": "Download Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Downloaded File has correct content\"] = responseBody === postman.getEnvironmentVariable(\"Ingested Text\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
									"console.log(\"< < < < < < < < < < < CRITICAL > > > > > > > > > >\");",
									"console.log(\"    These tests represent basic functionality.    \");",
									"console.log(\"         DO NOT PUSH if these tests fail.         \");",
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_text}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Download Geojson",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Downloaded File has correct content\"] = responseBody === postman.getEnvironmentVariable(\"Ingested Geojson\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Download Raster",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Download Shape",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_shape}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Download External Raster",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_external}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy Geojson",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get GeoJSON deploymentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get GeoJSON deploymentId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {",
									"            postman.setEnvironmentVariable(\"deploymentId_geojson\", data.data.result.deployment.deploymentId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy External Raster",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get External Raster deploymentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get External Raster deploymentId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {",
									"            postman.setEnvironmentVariable(\"deploymentId_external\", data.data.result.deployment.deploymentId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deploymentGroupId')) {",
									"    postman.setEnvironmentVariable(\"deploymentGroupId\",data.data.deploymentGroupId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/group",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy Raster into Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_raster}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Raster deploymentId (in Group)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get Raster deploymentId (in Group)');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {",
									"            postman.setEnvironmentVariable(\"deploymentId_raster\", data.data.result.deployment.deploymentId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy Shape into Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Shape deploymentId (in Group)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Get Shape deploymentId (in Group)');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {",
									"            postman.setEnvironmentVariable(\"deploymentId_shape\", data.data.result.deployment.deploymentId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3_Important",
			"description": "",
			"item": [
				{
					"name": "Get Text Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_text');",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
									"console.log(\"< < < < < < < < < < < IMPORTANT > > > > > > > > > > >\");",
									"console.log(\"      These tests represent important features.      \");",
									"console.log(\"Use extreme caution when pushing if these tests fail.\");",
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Geojson Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_geojson');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Raster Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_raster');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update Shape Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.message', 'string')) {",
									"    tests[\"Updated message\"] = data.data.message.match(/update/i);",
									"    tests[\"Correct dataId mentioned\"] = data.data.message.match(postman.getEnvironmentVariable('dataId_shape'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Yzc5ZGM1NjgtM2NlOC00ZTBmLWJiYzEtYjMzMjY4ZmVjYjY0Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"foo\",\r\n\t\"classType\": {\r\n\t\t\"classification\": \"UNCLASSIFIED\"\r\n\t}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Shape Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_shape');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.name')) {",
									"    tests[\"Update was successful\"] = data.data.metadata.name === 'foo';",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Yzc5ZGM1NjgtM2NlOC00ZTBmLWJiYzEtYjMzMjY4ZmVjYjY0Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get External Raster Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId returned\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_external');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Geojson Deployment Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_geojson');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.capabilitiesUrl')) {",
									"    postman.setEnvironmentVariable('capabilitiesUrl', data.data.deployment.capabilitiesUrl);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Raster Deployment Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_raster');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Shape Deployment Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_shape');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get External Raster Deployment Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_external');",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Validate capabilitiesUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{capabilitiesUrl}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_external = false;",
									"var found_geojson = false;",
									"var found_raster = false;",
									"var found_shape = false;",
									"var found_text = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_external = (found_external || data.data[i].dataId === postman.getEnvironmentVariable('dataId_external'));",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));",
									"            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));",
									"            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested External Raster data found in list\"] = found_external;",
									"tests[\"Ingested GeoJSON data found in list\"] = found_geojson;",
									"tests[\"Ingested Raster data found in list\"] = found_raster;",
									"tests[\"Ingested Shape data found in list\"] = found_shape;",
									"tests[\"Ingested Text data found in list\"] = found_text;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Deployments",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_external = false;",
									"var found_geojson = false;",
									"var found_raster = false;",
									"var found_shape = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {",
									"            found_external = (found_external || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_external'));",
									"            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));",
									"            found_raster = (found_raster || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));",
									"            found_shape = (found_shape || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_shape'));",
									"        }",
									"    }",
									"}",
									"",
									"",
									"tests[\"Ingested External Raster deployment found in list\"] = found_external;",
									"tests[\"Ingested GeoJSON deployment found in list\"] = found_geojson;",
									"tests[\"Ingested Raster deployment found in list\"] = found_raster;",
									"tests[\"Ingested Shape deployment found in list\"] = found_shape;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=createdOn&order=desc",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Large - Ingest GeoJSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/file",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"geojson\" }, \"metadata\": { \"name\": \"Test.geojson\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "beachfront.geojson"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Large - Get GeoJSON dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Large - Get GeoJSON dataId');",
									"            wait(3000); // Longer because of larger file.",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.dataId')) {",
									"            postman.setEnvironmentVariable(\"dataId_geojson_large\", data.data.result.dataId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Large - Download Geojson",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson_large}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Large - Deploy Geojson to Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_geojson_large}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Large - Get GeoJSON deploymentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Large - Get GeoJSON deploymentId');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Success') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.deployment.deploymentId')) {",
									"            postman.setEnvironmentVariable(\"deploymentId_geojson_large\", data.data.result.deployment.deploymentId);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Complex Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"var found_raster = false;",
									"var found_shape = false;",
									"var found_text = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));",
									"            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));",
									"            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON data found in list\"] = found_geojson;",
									"tests[\"Ingested Raster data found in list\"] = found_raster;",
									"tests[\"Ingested Shape data found in list\"] = found_shape;",
									"tests[\"Ingested Text data found in list\"] = found_text;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/query",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "4_Low",
			"description": "",
			"item": [
				{
					"name": "Get Text Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_text');",
									"}",
									"if (testLevels(tests, data, 'data.dataType.type')) {",
									"    tests[\"Type is 'text'\"] = data.data.dataType.type === 'text';",
									"}",
									"if (testLevels(tests, data, 'data.dataType.content')) {",
									"    tests[\"Correct Content\"] = data.data.dataType.content === postman.getEnvironmentVariable('Ingested Text');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.description')) {",
									"    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdBy')) {",
									"    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {",
									"    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdByJobId')) {",
									"    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_text');",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
									"console.log(\"< < < < < < < < < < < < LOW > > > > > > > > > > > \");",
									"console.log(\"  These tests represent less-important features.  \");",
									"console.log(\"More attention is given to options and edge cases.\");",
									"console.log(\"You may push if these tests fail, but be careful. \");",
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get geoJSON Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_geojson');",
									"}",
									"if (testLevels(tests, data, 'data.dataType.type')) {",
									"    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'geojson';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.description')) {",
									"    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdBy')) {",
									"    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {",
									"    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdByJobId')) {",
									"    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_geojson');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.name')) {",
									"    tests[\"Correct name\"] = data.data.metadata.name === 'Test.geojson';",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minX')) {",
									"    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 102;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxX')) {",
									"    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 106;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minY')) {",
									"    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 0.5;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxY')) {",
									"    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 4;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Raster Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_raster');",
									"}",
									"if (testLevels(tests, data, 'data.dataType.type')) {",
									"    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'raster';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.description')) {",
									"    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdBy')) {",
									"    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {",
									"    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdByJobId')) {",
									"    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_raster');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.name')) {",
									"    tests[\"Correct name\"] = data.data.metadata.name === 'terrametrics.tif';",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minX')) {",
									"    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === -48.52855770516021;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxX')) {",
									"    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === -48.34313089042421;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minY')) {",
									"    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === -6.404746816973356;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxY')) {",
									"    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === -6.182956360425359;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Shape Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_shape');",
									"}",
									"if (testLevels(tests, data, 'data.dataType.type')) {",
									"    tests[\"Type is 'shapefile'\"] = data.data.dataType.type === 'shapefile';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.description')) {",
									"    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdBy')) {",
									"    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {",
									"    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdByJobId')) {",
									"    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_shape');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.name')) {",
									"    tests[\"Correct name\"] = data.data.metadata.name === 'foo';",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minX')) {",
									"    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 102;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxX')) {",
									"    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 106;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minY')) {",
									"    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 0.5;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxY')) {",
									"    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 4;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Yzc5ZGM1NjgtM2NlOC00ZTBmLWJiYzEtYjMzMjY4ZmVjYjY0Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get External Raster Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"if (testLevels(tests, data, 'data.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.dataId === postman.getEnvironmentVariable('dataId_external');",
									"}",
									"if (testLevels(tests, data, 'data.dataType.type')) {",
									"    tests[\"Type is 'geojson'\"] = data.data.dataType.type === 'raster';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.description')) {",
									"    tests[\"Correct Description\"] = data.data.metadata.description === 'A file for integration tests.';",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdBy')) {",
									"    tests[\"Correct createdBy\"] = data.data.metadata.createdBy === postman.getEnvironmentVariable('username');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdOn', 'string')) {",
									"    tests[\"Date Generated\"] = data.data.metadata.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.metadata.createdOn)) <= 1800000;",
									"}",
									"if (testLevels(tests, data, 'data.metadata.createdByJobId')) {",
									"    tests[\"Correct createdByJobId\"] = data.data.metadata.createdByJobId === postman.getEnvironmentVariable('jobId_external');",
									"}",
									"if (testLevels(tests, data, 'data.metadata.name')) {",
									"    tests[\"Correct name\"] = data.data.metadata.name === 'My Test raster external file';",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minX')) {",
									"    tests[\"Correct minX\"] = data.data.spatialMetadata.minX === 496147.97;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxX')) {",
									"    tests[\"Correct maxX\"] = data.data.spatialMetadata.maxX === 496545.97;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.minY')) {",
									"    tests[\"Correct minY\"] = data.data.spatialMetadata.minY === 5422119.88;",
									"}",
									"if (testLevels(tests, data, 'data.spatialMetadata.maxY')) {",
									"    tests[\"Correct maxY\"] = data.data.spatialMetadata.maxY === 5422343.88;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Geojson Deployment Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_geojson');",
									"}",
									"testLevels(tests, data, 'data.deployment.capabilitiesUrl');",
									"if (testLevels(tests, data, 'data.deployment.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_geojson');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.layer')) {",
									"    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_geojson');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {",
									"    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Raster Deployment Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_raster');",
									"}",
									"testLevels(tests, data, 'data.deployment.capabilitiesUrl');",
									"if (testLevels(tests, data, 'data.deployment.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_raster');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.layer')) {",
									"    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_raster');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {",
									"    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get Shape Deployment Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_shape');",
									"}",
									"testLevels(tests, data, 'data.deployment.capabilitiesUrl');",
									"if (testLevels(tests, data, 'data.deployment.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_shape');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.layer')) {",
									"    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_shape');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {",
									"    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get External Raster Deployment Metadata Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.deployment.deploymentId')) {",
									"    tests[\"Correct deploymentId returned\"] = data.data.deployment.deploymentId === postman.getEnvironmentVariable('deploymentId_external');",
									"}",
									"testLevels(tests, data, 'data.deployment.capabilitiesUrl');",
									"if (testLevels(tests, data, 'data.deployment.dataId')) {",
									"    tests[\"Correct dataId\"] = data.data.deployment.dataId === postman.getEnvironmentVariable('dataId_external');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.layer')) {",
									"    tests[\"Layer matches dataId\"] = data.data.deployment.layer === postman.getEnvironmentVariable('dataId_external');",
									"}",
									"if (testLevels(tests, data, 'data.deployment.createdOn', 'string')) {",
									"    tests[\"createdOn Date Generated\"] = data.data.deployment.createdOn.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
									"    tests[\"Created in the last half hour\"] = (Date.now() - Date.parse(data.data.deployment.createdOn)) <= 1800000;",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_shape}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Complex Query - Search Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"var found_raster = false;",
									"var found_shape = false;",
									"var found_text = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));",
									"            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));",
									"            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON data found in list\"] = found_geojson;",
									"tests[\"Ingested Raster data found in list\"] = found_raster;",
									"tests[\"Ingested Shape data found in list\"] = found_shape;",
									"tests[\"Ingested Text data found in list\"] = found_text;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/query",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Complex Query - Search Type (geojson)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON data found in list\"] = found_geojson;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/query",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.dataType.type\": \"geojson\"\n        }\n    }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Complex Query - Search Name (TestShape.zip)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_shape = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON data found in list\"] = found_shape;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/query",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.name\": \"TestShape.zip\"\n        }\n    }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Data with Keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"var found_raster = false;",
									"var found_shape = false;",
									"var found_text = false;",
									"var found_keyword = true;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"            found_raster = (found_raster || data.data[i].dataId === postman.getEnvironmentVariable('dataId_raster'));",
									"            found_shape = (found_shape || data.data[i].dataId === postman.getEnvironmentVariable('dataId_shape'));",
									"            found_text = (found_text || data.data[i].dataId === postman.getEnvironmentVariable('dataId_text'));",
									"        }",
									"        found_keyword = found_keyword && JSON.stringify(data.data[i]).match('integration');",
									"    }",
									"    if (testLevels(tests, data, 'pagination.count')) {",
									"        tests[\"Count is correct\"] = data.pagination.count === data.data.length;",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON data found in list\"] = found_geojson;",
									"tests[\"Ingested Raster data found in list\"] = found_raster;",
									"tests[\"Ingested Shape data found in list\"] = found_shape;",
									"tests[\"Ingested Text data found in list\"] = found_text;",
									"tests[\"All results contain 'integration'\"] = found_keyword;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc&keyword=integration",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Deployment with Keyword (Raster dataId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_raster = false;",
									"var found_keyword = true;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {",
									"            found_raster = (found_raster || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_raster'));",
									"        }",
									"        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(postman.getEnvironmentVariable('dataId_raster'));",
									"    }",
									"    if (testLevels(tests, data, 'pagination.count')) {",
									"        tests[\"Count is correct\"] = data.pagination.count === data.data.length;",
									"    }",
									"}",
									"",
									"tests[\"Ingested Raster data found in list\"] = found_raster;",
									"tests[\"All results contain the keyword\"] = found_keyword;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=metadata.createdOn&order=desc&keyword={{dataId_raster}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List Deployment with Keyword (GeoJSON deploymentId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"var found_keyword = true;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));",
									"        }",
									"        found_keyword = found_keyword && JSON.stringify(data.data[i]).match(postman.getEnvironmentVariable('deploymentId_geojson'));",
									"    }",
									"    if (testLevels(tests, data, 'pagination.count')) {",
									"        tests[\"Count is correct\"] = data.pagination.count === data.data.length;",
									"    }",
									"}",
									"",
									"tests[\"Ingested geoJSON data found in list\"] = found_geojson;",
									"tests[\"All results contain the keyword\"] = found_keyword;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=metadata.createdOn&order=desc&keyword={{deploymentId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Deployment in Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Error response\"] = data.type.match(/[Ee]rror/);",
									"}",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Unable to delete message\"] = data.message.match(/unable.*delet/i);",
									"    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_raster'));",
									"    tests[\"Deployment Group Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentGroupId'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic OTE1MmI2MmYtZDJmOC00OTQwLWFkMTItYzRkZTY5ZjYyOWYzOg==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Deployment Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Deployment Group Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Does not exist message\"] = data.message.match(/no.*exist/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/group/{{deploymentGroupId}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Group - Deploy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentGroupId\": \"{{deploymentGroupId}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Group - Deploy - Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Deleted Group - Deploy - Job Status');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Error') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.details', 'string')) {",
									"            tests[\"Details state Deployment Group does not exist\"] = data.data.result.details.match(/do.*no.*exist/i);",
									"            tests[\"deploymentGroupId included in details\"] = data.data.result.details.match(postman.getEnvironmentVariable('deploymentGroupId'));",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status + \" (Bug #9223)\"] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete GeoJSON Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic e3tweiBrZXl9fTo=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Data - Delete Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);",
									"}",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);",
									"    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Data - GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);",
									"}",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);",
									"    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Data - Download",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);",
									"}",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);",
									"    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('dataId_geojson'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/file/{{dataId_geojson}}",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Data - Verify Removed from List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON removed from list\"] = !found_geojson;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data?perPage=200&sortBy=metadata.createdOn&order=desc",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Data - Deploy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Data - Deploy - Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Deleted Data - Deploy - Job Status');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Error') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.details', 'string')) {",
									"            tests[\"Details state dataId does not exist\"] = data.data.result.details.match(/do.*no.*exist/i);",
									"            tests[\"dataId included in details\"] = data.data.result.details.match(postman.getEnvironmentVariable('dataId_geojson'));",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status + \" (Bug #9223)\"] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": "Check that the attempted deployment of a deleted dataId failed."
					},
					"response": []
				},
				{
					"name": "Deleted Data - Verify Removed from ES",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'dataId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].dataId === postman.getEnvironmentVariable('dataId_geojson'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Ingested GeoJSON removed from list (Bug #9174)\"] = !found_geojson;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/query",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": {\n        \"match\": {\n            \"dataResource.metadata.description\": \"integration\"\n        }\n    }\n}"
						},
						"description": "Query the /data/query (Elastic Search) endpoint to verify that the deleted dataId is not present in the result."
					},
					"response": []
				},
				{
					"name": "Delete Geojson Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Deployment - Delete Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);",
									"}",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);",
									"    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_geojson'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Deployment - GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ee]rror/);",
									"}",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Not Found Message\"] = data.message.match(/[Nn]o/) && data.message.match(/[Ff]ound/);",
									"    tests[\"Deployment Id included in message\"] = data.message.match(postman.getEnvironmentVariable('deploymentId_geojson'));",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deleted Deployment - Verify Removed from List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"",
									"var found_geojson = false;",
									"",
									"if (testLevels(tests, data, 'data', 'array')) {",
									"    for (i = 0; i < data.data.length; i++) {",
									"        if (testLevels(tests, data.data[i], 'deploymentId', 'skip', 'data[]')) {",
									"            found_geojson = (found_geojson || data.data[i].deploymentId === postman.getEnvironmentVariable('deploymentId_geojson'));",
									"        }",
									"    }",
									"}",
									"",
									"tests[\"Deployed GeoJSON removed from list\"] = !found_geojson;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment?perPage=200&sortBy=createdOn&order=desc",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{$timestamp}}\",\r\n\t\"mapping\": {\r\n\t\t\"dataId\": \"string\",\r\n\t\t\"dataType\": \"string\",\r\n\t\t\"epsg\": \"short\",\r\n\t\t\"minX\": \"long\",\r\n\t\t\"minY\": \"long\",\r\n\t\t\"maxX\": \"long\",\r\n\t\t\"maxY\": \"long\",\r\n\t\t\"hosted\": \"boolean\"\r\n\t}\r\n}\t"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_text}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy Text Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Deploy Text Job Status');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Error') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.details', 'string')) {",
									"            tests[\"Details mention that 'text' type cannot be deployed\"] = data.data.result.details.match(/no.*deploy/i) && data.data.result.details.match(/type/i) && data.data.result.details.match(/text/i);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy - No type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic e3tBUEkgS2V5fX06",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"deploymentType\": \"geoserver\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy - No deploymentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'errors', 'array')) {",
									"    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {",
									"        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'deploymentType';",
									"    }",
									"    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {",
									"        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic e3tBUEkgS2V5fX06",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_external}}\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy - No dataId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'errors', 'array')) {",
									"    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {",
									"        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'dataId';",
									"    }",
									"    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {",
									"        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic e3tBUEkgS2V5fX06",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - No type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - No host",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'errors', 'array')) {",
									"    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {",
									"        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'host';",
									"    }",
									"    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {",
									"        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - No dataType",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'errors', 'array')) {",
									"    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {",
									"        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'data.dataType';",
									"    }",
									"    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {",
									"        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - No dataType.type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Missing Type message\"] = data.message.match(/missing.*type/i);",
									"    tests[\"Mentions 'data.dataType' object\"] = data.message.match(/data\\.dataType/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - No dataType.content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'errors', 'array')) {",
									"    if (testLevels(tests, data.errors[0], 'field', 'skip', 'errors[0].')) {",
									"        tests[\"Problem with deploymentType\"] = data.errors[0].field === 'data.dataType.content';",
									"    }",
									"    if (testLevels(tests, data.errors[0], 'defaultMessage', 'string', 'errors[0].')) {",
									"        tests[\"Cannot Be Null Message\"] = data.errors[0].defaultMessage.match(/null/i);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YjdkMTUzZWMtMjQ4MC00ZGEzLTg0ZjctMDE0NWNmNTlhMjk4Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"type\": \"ingest\",\r\n  \"host\": false\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy - Bad type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Bad Type message\"] = data.message.match(/type/i);",
									"    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"geoserver\",\r\n  \"type\": \"~access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy - Bad deploymentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'data.jobId')) {",
									"    postman.setEnvironmentVariable(\"jobId\",data.data.jobId);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dataId\": \"{{dataId_geojson}}\",\r\n  \"deploymentType\": \"~geoserver\",\r\n  \"type\": \"access\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Deploy - Bad deploymentType - Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var wait = eval(postman.getEnvironmentVariable('wait'));",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"if (testLevels(tests, data, 'data.status')) {",
									"    if (data.data.status === 'Running' || data.data.status === 'Submitted') {",
									"        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {",
									"            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);",
									"            postman.setNextRequest('Deploy - Bad deploymentType - Job Status');",
									"            wait(1000);",
									"        }",
									"        else {",
									"            tests[\"Job finished in time\"] = false;",
									"            postman.setEnvironmentVariable('retry_loop',0);",
									"        }",
									"    }",
									"    else if (data.data.status === 'Error') {",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"        tests[\"Job finished in time\"] = true;",
									"        if (testLevels(tests, data, 'data.result.details', 'string')) {",
									"            tests[\"Details mention that '~geoserver' is an unknown deployment type\"] = data.data.result.details.match(/unknown/i) && data.data.result.details.match(/type/i) && data.data.result.details.match(/~geoserver/i);",
									"        }",
									"    }",
									"    else {",
									"        tests[\"status should not be \" + data.data.status] = false;",
									"        postman.setEnvironmentVariable('retry_loop',0);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/job/{{jobId}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - Bad type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Bad Type message\"] = data.message.match(/type/i);",
									"    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": \"{{Ingested Text}}\",\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"~ingest\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - Bad metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Bad Type message\"] = data.message.match(/type/i);",
									"    tests[\"Mentions 'data.dataType' object\"] = data.message.match(/data\\.dataType/i);",
									"    tests[\"Good options given\"] = data.message.match(/known.*\\[(.*,?)*\\]/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": {\r\n        \t\"bad\": \"content\"\r\n        },\r\n        \"type\": \"~text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Local Raster - Host False",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400 (Bug #9271)\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Message states that host must be set to true\"] = data.message.match(/host.*true/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/file",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{ \"type\": \"ingest\", \"host\": \"false\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "terrametrics.tif"
								}
							]
						},
						"description": "Attempt to ingest a file while setting the \"host\" parameter to false."
					},
					"response": []
				},
				{
					"name": "Ingest Local Raster - No Attached File",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"File not present\"] = data.message.match(/file.*no.*present/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/file",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{ \"type\": \"ingest\", \"host\": \"true\", \"data\" : { \"dataType\": { \"type\": \"raster\" }, \"metadata\": { \"name\": \"terrametrics.tif\", \"description\": \"A file for integration tests.\", \"classType\": { \"classification\": \"unclassified\" } } } }",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - Content as Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Bad content message\"] = data.message.match(/content/i);",
									"    tests[\"Problem with OBJECT\"] = data.message.match(/object/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": {\r\n        \t\"bad\": \"content\"\r\n        },\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Ingest Text - Content as Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"if (testLevels(tests, data, 'message', 'string')) {",
									"    tests[\"Bad content message\"] = data.message.match(/content/i);",
									"    tests[\"Problem with ARRAY\"] = data.message.match(/array/i);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ODU4OTJhNjYtN2ZkMS00OWUzLWI4NDAtYzEyMGViMmM5ODU2Og==",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"dataType\": {\r\n        \"content\": [\r\n        \t\"should\",\r\n        \t\"not\",\r\n        \t\"be\",\r\n        \t\"array\"\r\n        \t],\r\n        \"type\": \"text\"\r\n    },\r\n    \"metadata\": {\r\n        \"description\": \"A file for integration tests.\"\r\n    }\r\n  },\r\n  \"host\": false,\r\n  \"type\": \"ingest\"\r\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "5_Teardown",
			"description": "",
			"item": [
				{
					"name": "Delete Raster Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");",
									"console.log(\" < < < < < < < < < < < < TEAR-DOWN > > > > > > > > > > > \");",
									"console.log(\"These tests destroy any items created by previous tests. \");",
									"console.log(\" These tests represent important features, like DELETEs. \");",
									"console.log(\"            DO NOT PUSH if these tests fail.             \");",
									"console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_raster}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Shape Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_shape}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Text Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_text}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete External Raster Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_external}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Large GeoJSON Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/data/{{dataId_geojson_large}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic e3tweiBrZXl9fTo=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Raster Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_raster}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Shape Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_shape}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete External Raster Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_external}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Large GeoJSON Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var testLevels = eval(postman.getEnvironmentVariable('testLevels'));",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (testLevels(tests, data, 'type', 'string')) {",
									"    tests[\"Deletion successful\"] = data.type.match(/[Ss]uccess/);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{API Key}}",
								"password": "",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "https://pz-gateway.{{domain}}/deployment/{{deploymentId_geojson_large}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YmY5MDViODItNGMxYi00ZDhhLWJiMGYtZGM0MjQyOGJhOTU2Og==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}